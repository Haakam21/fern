// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	transactions "github.com/mixed-file-directory/fern/locations/transactions"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Transactions *transactions.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:       options.ToHeader(),
		Transactions: transactions.NewClient(opts...),
	}
}

// Provides details about all of the seller's [locations](https://developer.squareup.com/docs/locations-api),
// including those with an inactive status.
func (c *Client) List(
	ctx context.Context,
	opts ...option.RequestOption,
) (*fern.ListLocationsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/locations"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.ListLocationsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a [location](https://developer.squareup.com/docs/locations-api).
// Creating new locations allows for separate configuration of receipt layouts, item prices,
// and sales reports. Developers can use locations to separate sales activity through applications
// that integrate with Square from sales activity elsewhere in a seller's account.
// Locations created programmatically with the Locations API last forever and
// are visible to the seller for their own management. Therefore, ensure that
// each location has a sensible and unique name.
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateLocationRequest,
	opts ...option.RequestOption,
) (*fern.CreateLocationResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/locations"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateLocationResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves details of a single location. Specify "main"
// as the location ID to retrieve details of the [main location](https://developer.squareup.com/docs/locations-api#about-the-main-location).
func (c *Client) Get(
	ctx context.Context,
	// The ID of the location to retrieve. Specify the string
	// "main" to return the main location.
	locationId string,
	opts ...option.RequestOption,
) (*fern.GetLocationResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/locations/%v", locationId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetLocationResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a [location](https://developer.squareup.com/docs/locations-api).
func (c *Client) Update(
	ctx context.Context,
	// The ID of the location to update.
	locationId string,
	request *fern.UpdateLocationRequest,
	opts ...option.RequestOption,
) (*fern.UpdateLocationResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/locations/%v", locationId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateLocationResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Links a `checkoutId` to a `checkout_page_url` that customers are
// directed to in order to provide their payment information using a
// payment processing workflow hosted on connect.squareup.com.
//
// NOTE: The Checkout API has been updated with new features.
// For more information, see [Checkout API highlights](https://developer.squareup.com/docs/checkout-api#checkout-api-highlights).
// We recommend that you use the new [CreatePaymentLink](api-endpoint:Checkout-CreatePaymentLink)
// endpoint in place of this previously released endpoint.
func (c *Client) Checkouts(
	ctx context.Context,
	// The ID of the business location to associate the checkout with.
	locationId string,
	request *fern.CreateCheckoutRequest,
	opts ...option.RequestOption,
) (*fern.CreateCheckoutResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/locations/%v/checkouts", locationId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateCheckoutResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
