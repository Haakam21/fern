// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type DisputesCreateEvidenceFileRequest struct {
	Request interface{} `json:"request,omitempty" url:"-"`
}

type CreateDisputeEvidenceTextRequest struct {
	// A unique key identifying the request. For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The type of evidence you are uploading.
	// See [DisputeEvidenceType](#type-disputeevidencetype) for possible values
	EvidenceType *DisputeEvidenceType `json:"evidence_type,omitempty" url:"-"`
	// The evidence string.
	EvidenceText string `json:"evidence_text" url:"-"`
}

type DisputesListRequest struct {
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for the original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The dispute states used to filter the result. If not specified, the endpoint returns all disputes.
	States *DisputeState `json:"-" url:"states,omitempty"`
	// The ID of the location for which to return a list of disputes.
	// If not specified, the endpoint returns disputes associated with all locations.
	LocationId *string `json:"-" url:"location_id,omitempty"`
}

// Defines the fields in an `AcceptDispute` response.
type AcceptDisputeResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// Details about the accepted dispute.
	Dispute *Dispute `json:"dispute,omitempty" url:"dispute,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AcceptDisputeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AcceptDisputeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AcceptDisputeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AcceptDisputeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AcceptDisputeResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Defines the fields in a `CreateDisputeEvidenceFile` response.
type CreateDisputeEvidenceFileResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The metadata of the newly uploaded dispute evidence.
	Evidence *DisputeEvidence `json:"evidence,omitempty" url:"evidence,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateDisputeEvidenceFileResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDisputeEvidenceFileResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDisputeEvidenceFileResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDisputeEvidenceFileResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDisputeEvidenceFileResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields in a `CreateDisputeEvidenceText` response.
type CreateDisputeEvidenceTextResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The newly uploaded dispute evidence metadata.
	Evidence *DisputeEvidence `json:"evidence,omitempty" url:"evidence,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateDisputeEvidenceTextResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateDisputeEvidenceTextResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateDisputeEvidenceTextResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateDisputeEvidenceTextResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateDisputeEvidenceTextResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The type of the dispute evidence.
type DisputeEvidenceType string

const (
	DisputeEvidenceTypeUnknownType                       DisputeEvidenceType = "UNKNOWN_TYPE"
	DisputeEvidenceTypeGenericEvidence                   DisputeEvidenceType = "GENERIC_EVIDENCE"
	DisputeEvidenceTypeOnlineOrAppAccessLog              DisputeEvidenceType = "ONLINE_OR_APP_ACCESS_LOG"
	DisputeEvidenceTypeAuthorizationDocumentation        DisputeEvidenceType = "AUTHORIZATION_DOCUMENTATION"
	DisputeEvidenceTypeCancellationOrRefundDocumentation DisputeEvidenceType = "CANCELLATION_OR_REFUND_DOCUMENTATION"
	DisputeEvidenceTypeCardholderCommunication           DisputeEvidenceType = "CARDHOLDER_COMMUNICATION"
	DisputeEvidenceTypeCardholderInformation             DisputeEvidenceType = "CARDHOLDER_INFORMATION"
	DisputeEvidenceTypePurchaseAcknowledgement           DisputeEvidenceType = "PURCHASE_ACKNOWLEDGEMENT"
	DisputeEvidenceTypeDuplicateChargeDocumentation      DisputeEvidenceType = "DUPLICATE_CHARGE_DOCUMENTATION"
	DisputeEvidenceTypeProductOrServiceDescription       DisputeEvidenceType = "PRODUCT_OR_SERVICE_DESCRIPTION"
	DisputeEvidenceTypeReceipt                           DisputeEvidenceType = "RECEIPT"
	DisputeEvidenceTypeServiceReceivedDocumentation      DisputeEvidenceType = "SERVICE_RECEIVED_DOCUMENTATION"
	DisputeEvidenceTypeProofOfDeliveryDocumentation      DisputeEvidenceType = "PROOF_OF_DELIVERY_DOCUMENTATION"
	DisputeEvidenceTypeRelatedTransactionDocumentation   DisputeEvidenceType = "RELATED_TRANSACTION_DOCUMENTATION"
	DisputeEvidenceTypeRebuttalExplanation               DisputeEvidenceType = "REBUTTAL_EXPLANATION"
	DisputeEvidenceTypeTrackingNumber                    DisputeEvidenceType = "TRACKING_NUMBER"
)

func NewDisputeEvidenceTypeFromString(s string) (DisputeEvidenceType, error) {
	switch s {
	case "UNKNOWN_TYPE":
		return DisputeEvidenceTypeUnknownType, nil
	case "GENERIC_EVIDENCE":
		return DisputeEvidenceTypeGenericEvidence, nil
	case "ONLINE_OR_APP_ACCESS_LOG":
		return DisputeEvidenceTypeOnlineOrAppAccessLog, nil
	case "AUTHORIZATION_DOCUMENTATION":
		return DisputeEvidenceTypeAuthorizationDocumentation, nil
	case "CANCELLATION_OR_REFUND_DOCUMENTATION":
		return DisputeEvidenceTypeCancellationOrRefundDocumentation, nil
	case "CARDHOLDER_COMMUNICATION":
		return DisputeEvidenceTypeCardholderCommunication, nil
	case "CARDHOLDER_INFORMATION":
		return DisputeEvidenceTypeCardholderInformation, nil
	case "PURCHASE_ACKNOWLEDGEMENT":
		return DisputeEvidenceTypePurchaseAcknowledgement, nil
	case "DUPLICATE_CHARGE_DOCUMENTATION":
		return DisputeEvidenceTypeDuplicateChargeDocumentation, nil
	case "PRODUCT_OR_SERVICE_DESCRIPTION":
		return DisputeEvidenceTypeProductOrServiceDescription, nil
	case "RECEIPT":
		return DisputeEvidenceTypeReceipt, nil
	case "SERVICE_RECEIVED_DOCUMENTATION":
		return DisputeEvidenceTypeServiceReceivedDocumentation, nil
	case "PROOF_OF_DELIVERY_DOCUMENTATION":
		return DisputeEvidenceTypeProofOfDeliveryDocumentation, nil
	case "RELATED_TRANSACTION_DOCUMENTATION":
		return DisputeEvidenceTypeRelatedTransactionDocumentation, nil
	case "REBUTTAL_EXPLANATION":
		return DisputeEvidenceTypeRebuttalExplanation, nil
	case "TRACKING_NUMBER":
		return DisputeEvidenceTypeTrackingNumber, nil
	}
	var t DisputeEvidenceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DisputeEvidenceType) Ptr() *DisputeEvidenceType {
	return &d
}

// The list of possible dispute states.
type DisputeState string

const (
	DisputeStateUnknownState            DisputeState = "UNKNOWN_STATE"
	DisputeStateInquiryEvidenceRequired DisputeState = "INQUIRY_EVIDENCE_REQUIRED"
	DisputeStateInquiryProcessing       DisputeState = "INQUIRY_PROCESSING"
	DisputeStateInquiryClosed           DisputeState = "INQUIRY_CLOSED"
	DisputeStateEvidenceRequired        DisputeState = "EVIDENCE_REQUIRED"
	DisputeStateProcessing              DisputeState = "PROCESSING"
	DisputeStateWon                     DisputeState = "WON"
	DisputeStateLost                    DisputeState = "LOST"
	DisputeStateAccepted                DisputeState = "ACCEPTED"
	DisputeStateWaitingThirdParty       DisputeState = "WAITING_THIRD_PARTY"
)

func NewDisputeStateFromString(s string) (DisputeState, error) {
	switch s {
	case "UNKNOWN_STATE":
		return DisputeStateUnknownState, nil
	case "INQUIRY_EVIDENCE_REQUIRED":
		return DisputeStateInquiryEvidenceRequired, nil
	case "INQUIRY_PROCESSING":
		return DisputeStateInquiryProcessing, nil
	case "INQUIRY_CLOSED":
		return DisputeStateInquiryClosed, nil
	case "EVIDENCE_REQUIRED":
		return DisputeStateEvidenceRequired, nil
	case "PROCESSING":
		return DisputeStateProcessing, nil
	case "WON":
		return DisputeStateWon, nil
	case "LOST":
		return DisputeStateLost, nil
	case "ACCEPTED":
		return DisputeStateAccepted, nil
	case "WAITING_THIRD_PARTY":
		return DisputeStateWaitingThirdParty, nil
	}
	var t DisputeState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DisputeState) Ptr() *DisputeState {
	return &d
}

// Defines fields in a `RetrieveDispute` response.
type GetDisputeResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// Details about the requested `Dispute`.
	Dispute *Dispute `json:"dispute,omitempty" url:"dispute,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetDisputeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetDisputeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetDisputeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetDisputeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetDisputeResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Defines fields in a `ListDisputes` response.
type ListDisputesResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The list of disputes.
	Disputes []*Dispute `json:"disputes,omitempty" url:"disputes,omitempty"`
	// The pagination cursor to be used in a subsequent request.
	// If unset, this is the final response. For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListDisputesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListDisputesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListDisputesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListDisputesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListDisputesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Defines the fields in a `SubmitEvidence` response.
type SubmitEvidenceResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The `Dispute` for which evidence was submitted.
	Dispute *Dispute `json:"dispute,omitempty" url:"dispute,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SubmitEvidenceResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SubmitEvidenceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SubmitEvidenceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SubmitEvidenceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SubmitEvidenceResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
