// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type BatchGetOrdersRequest struct {
	// The ID of the location for these orders. This field is optional: omit it to retrieve
	// orders within the scope of the current authorization's merchant ID.
	LocationId *string `json:"location_id,omitempty" url:"-"`
	// The IDs of the orders to retrieve. A maximum of 100 orders can be retrieved per request.
	OrderIds []string `json:"order_ids,omitempty" url:"-"`
}

type CalculateOrderRequest struct {
	// The order to be calculated. Expects the entire order, not a sparse update.
	Order *Order `json:"order,omitempty" url:"-"`
	// Identifies one or more loyalty reward tiers to apply during the order calculation.
	// The discounts defined by the reward tiers are added to the order only to preview the
	// effect of applying the specified rewards. The rewards do not correspond to actual
	// redemptions; that is, no `reward`s are created. Therefore, the reward `id`s are
	// random strings used only to reference the reward tier.
	ProposedRewards []*OrderReward `json:"proposed_rewards,omitempty" url:"-"`
}

type CloneOrderRequest struct {
	// The ID of the order to clone.
	OrderId string `json:"order_id" url:"-"`
	// An optional order version for concurrency protection.
	//
	// If a version is provided, it must match the latest stored version of the order to clone.
	// If a version is not provided, the API clones the latest version.
	Version *int `json:"version,omitempty" url:"-"`
	// A value you specify that uniquely identifies this clone request.
	//
	// If you are unsure whether a particular order was cloned successfully,
	// you can reattempt the call with the same idempotency key without
	// worrying about creating duplicate cloned orders.
	// The originally cloned order is returned.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}

type PayOrderRequest struct {
	// A value you specify that uniquely identifies this request among requests you have sent. If
	// you are unsure whether a particular payment request was completed successfully, you can reattempt
	// it with the same idempotency key without worrying about duplicate payments.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The version of the order being paid. If not supplied, the latest version will be paid.
	OrderVersion *int `json:"order_version,omitempty" url:"-"`
	// The IDs of the [payments](entity:Payment) to collect.
	// The payment total must match the order total.
	PaymentIds []string `json:"payment_ids,omitempty" url:"-"`
}

type SearchOrdersRequest struct {
	// The location IDs for the orders to query. All locations must belong to
	// the same merchant.
	//
	// Min: 1 location ID.
	//
	// Max: 10 location IDs.
	LocationIds []string `json:"location_ids,omitempty" url:"-"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// Query conditions used to filter or sort the results. Note that when
	// retrieving additional pages using a cursor, you must use the original query.
	Query *SearchOrdersQuery `json:"query,omitempty" url:"-"`
	// The maximum number of results to be returned in a single page. It is
	// possible to receive fewer results than the specified limit on a given page.
	//
	// Default: `500`
	Limit *int `json:"limit,omitempty" url:"-"`
	// A Boolean that controls the format of the search results. If `true`,
	// `SearchOrders` returns [OrderEntry](entity:OrderEntry) objects. If `false`, `SearchOrders`
	// returns complete order objects.
	//
	// Default: `false`.
	ReturnEntries *bool `json:"return_entries,omitempty" url:"-"`
}

// Defines the fields that are included in the response body of
// a request to the `BatchRetrieveOrders` endpoint.
type BatchGetOrdersResponse struct {
	// The requested orders. This will omit any requested orders that do not exist.
	Orders []*Order `json:"orders,omitempty" url:"orders,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchGetOrdersResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchGetOrdersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchGetOrdersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchGetOrdersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchGetOrdersResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CalculateOrderResponse struct {
	// The calculated version of the order provided in the request.
	Order *Order `json:"order,omitempty" url:"order,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CalculateOrderResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CalculateOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CalculateOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CalculateOrderResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CalculateOrderResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that are included in the response body of
// a request to the [CloneOrder](api-endpoint:Orders-CloneOrder) endpoint.
type CloneOrderResponse struct {
	// The cloned order.
	Order *Order `json:"order,omitempty" url:"order,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CloneOrderResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CloneOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CloneOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CloneOrderResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CloneOrderResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that are included in the response body of
// a request to the `CreateOrder` endpoint.
//
// Either `errors` or `order` is present in a given response, but never both.
type CreateOrderResponse struct {
	// The newly created order.
	Order *Order `json:"order,omitempty" url:"order,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateOrderResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrderResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrderResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetOrderResponse struct {
	// The requested order.
	Order *Order `json:"order,omitempty" url:"order,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetOrderResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrderResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrderResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Represents a reward that can be applied to an order if the necessary
// reward tier criteria are met. Rewards are created through the Loyalty API.
type OrderReward struct {
	// The identifier of the reward.
	Id string `json:"id" url:"id"`
	// The identifier of the reward tier corresponding to this reward.
	RewardTierId string `json:"reward_tier_id" url:"reward_tier_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *OrderReward) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrderReward) UnmarshalJSON(data []byte) error {
	type unmarshaler OrderReward
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrderReward(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrderReward) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

// Defines the fields that are included in the response body of a request to the
// [PayOrder](api-endpoint:Orders-PayOrder) endpoint.
type PayOrderResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The paid, updated [order](entity:Order).
	Order *Order `json:"order,omitempty" url:"order,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PayOrderResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PayOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PayOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PayOrderResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PayOrderResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Contains query criteria for the search.
type SearchOrdersQuery struct {
	// Criteria to filter results by.
	Filter *SearchOrdersFilter `json:"filter,omitempty" url:"filter,omitempty"`
	// Criteria to sort results by.
	Sort *SearchOrdersSort `json:"sort,omitempty" url:"sort,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchOrdersQuery) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchOrdersQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchOrdersQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchOrdersQuery(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchOrdersQuery) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Either the `order_entries` or `orders` field is set, depending on whether
// `return_entries` is set on the [SearchOrdersRequest](api-endpoint:Orders-SearchOrders).
type SearchOrdersResponse struct {
	// A list of [OrderEntries](entity:OrderEntry) that fit the query
	// conditions. The list is populated only if `return_entries` is set to `true` in the request.
	OrderEntries []*OrderEntry `json:"order_entries,omitempty" url:"order_entries,omitempty"`
	// A list of
	// [Order](entity:Order) objects that match the query conditions. The list is populated only if
	// `return_entries` is set to `false` in the request.
	Orders []*Order `json:"orders,omitempty" url:"orders,omitempty"`
	// The pagination cursor to be used in a subsequent request. If unset,
	// this is the final response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// [Errors](entity:Error) encountered during the search.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchOrdersResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchOrdersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchOrdersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchOrdersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchOrdersResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Defines the fields that are included in the response body of
// a request to the [UpdateOrder](api-endpoint:Orders-UpdateOrder) endpoint.
type UpdateOrderResponse struct {
	// The updated order.
	Order *Order `json:"order,omitempty" url:"order,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateOrderResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrderResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrderResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrderResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrderResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateOrderRequest struct {
	// The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders#sparse-order-objects)
	// containing only the fields to update and the version to which the update is
	// being applied.
	Order *Order `json:"order,omitempty" url:"-"`
	// The [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
	// fields to clear. For example, `line_items[uid].note`.
	// For more information, see [Deleting fields](https://developer.squareup.com/docs/orders-api/manage-orders#delete-fields).
	FieldsToClear []string `json:"fields_to_clear,omitempty" url:"-"`
	// A value you specify that uniquely identifies this update request.
	//
	// If you are unsure whether a particular update was applied to an order successfully,
	// you can reattempt it with the same idempotency key without
	// worrying about creating duplicate updates to the order.
	// The latest order version is returned.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}
