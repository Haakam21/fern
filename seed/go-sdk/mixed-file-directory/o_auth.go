// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type OAuthAuthorizeRequest struct {
	// The Square-issued ID for your application, available from
	// the OAuth page for your application on the Developer Dashboard.
	ClientId string `json:"-" url:"client_id"`
	// A space-separated list of the permissions that the application is requesting.
	// Default: "`MERCHANT_PROFILE_READ PAYMENTS_READ SETTLEMENTS_READ BANK_ACCOUNTS_READ`"
	Scope *OAuthPermission `json:"-" url:"scope,omitempty"`
	// The locale to present the permission request form in. Square detects
	// the appropriate locale automatically. Only provide this value if the
	// application can definitively determine the preferred locale.
	//
	// Currently supported values: `en-IE`, `en-US`, `en-CA`, `es-US`, `fr-CA`, and
	// `ja-JP`.
	Locale *string `json:"-" url:"locale,omitempty"`
	// If `false`, the user must log in to their Square account to
	// view the Permission Request form, even if they already have a valid user
	// session. This value has no effect in Sandbox.
	// Default: `true`
	Session *bool `json:"-" url:"session,omitempty"`
	// When provided, `state` is passed to the configured redirect URL after
	// the Permission Request form is submitted. You can include `state` and verify
	// its value to help protect against cross-site request forgery.
	State *string `json:"-" url:"state,omitempty"`
	// When provided, the oauth flow will use PKCE to authorize. The `code_challenge` will be associated
	// with the authorization_code and a `code_verifier` will need to passed in to obtain the access token.
	CodeChallenge *string `json:"-" url:"code_challenge,omitempty"`
}

type ObtainTokenRequest struct {
	// The Square-issued ID of your application, which is available in the OAuth page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientId string `json:"client_id" url:"-"`
	// The Square-issued application secret for your application, which is available in the OAuth page
	// in the [Developer Dashboard](https://developer.squareup.com/apps). This parameter is only required when you are not using the [OAuth PKCE (Proof Key for Code Exchange) flow](https://developer.squareup.com/docs/oauth-api/overview#pkce-flow).
	// The PKCE flow requires a `code_verifier` instead of a `client_secret`.
	ClientSecret *string `json:"client_secret,omitempty" url:"-"`
	// The authorization code to exchange.
	// This code is required if `grant_type` is set to `authorization_code` to indicate that
	// the application wants to exchange an authorization code for an OAuth access token.
	Code *string `json:"code,omitempty" url:"-"`
	// The redirect URL assigned in the OAuth page for your application in the [Developer Dashboard](https://developer.squareup.com/apps).
	RedirectUri *string `json:"redirect_uri,omitempty" url:"-"`
	// Specifies the method to request an OAuth access token.
	// Valid values are `authorization_code`, `refresh_token`, and `migration_token`.
	GrantType string `json:"grant_type" url:"-"`
	// A valid refresh token for generating a new OAuth access token.
	//
	// A valid refresh token is required if `grant_type` is set to `refresh_token`
	// to indicate that the application wants a replacement for an expired OAuth access token.
	RefreshToken *string `json:"refresh_token,omitempty" url:"-"`
	// A legacy OAuth access token obtained using a Connect API version prior
	// to 2019-03-13. This parameter is required if `grant_type` is set to
	// `migration_token` to indicate that the application wants to get a replacement
	// OAuth access token. The response also returns a refresh token.
	// For more information, see [Migrate to Using Refresh Tokens](https://developer.squareup.com/docs/oauth-api/migrate-to-refresh-tokens).
	MigrationToken *string `json:"migration_token,omitempty" url:"-"`
	// A JSON list of strings representing the permissions that the application is requesting.
	// For example, "`["MERCHANT_PROFILE_READ","PAYMENTS_READ","BANK_ACCOUNTS_READ"]`".
	//
	// The access token returned in the response is granted the permissions
	// that comprise the intersection between the requested list of permissions and those
	// that belong to the provided refresh token.
	Scopes []string `json:"scopes,omitempty" url:"-"`
	// A Boolean indicating a request for a short-lived access token.
	//
	// The short-lived access token returned in the response expires in 24 hours.
	ShortLived *bool `json:"short_lived,omitempty" url:"-"`
	// Must be provided when using PKCE OAuth flow. The `code_verifier` will be used to verify against the
	// `code_challenge` associated with the `authorization_code`.
	CodeVerifier *string `json:"code_verifier,omitempty" url:"-"`
}

type RenewTokenRequest struct {
	// The token you want to renew.
	AccessToken *string `json:"access_token,omitempty" url:"-"`
}

type RevokeTokenRequest struct {
	// The Square-issued ID for your application, which is available in the OAuth page in the
	// [Developer Dashboard](https://developer.squareup.com/apps).
	ClientId *string `json:"client_id,omitempty" url:"-"`
	// The access token of the merchant whose token you want to revoke.
	// Do not provide a value for `merchant_id` if you provide this parameter.
	AccessToken *string `json:"access_token,omitempty" url:"-"`
	// The ID of the merchant whose token you want to revoke.
	// Do not provide a value for `access_token` if you provide this parameter.
	MerchantId *string `json:"merchant_id,omitempty" url:"-"`
	// If `true`, terminate the given single access token, but do not
	// terminate the entire authorization.
	// Default: `false`
	RevokeOnlyAccessToken *bool `json:"revoke_only_access_token,omitempty" url:"-"`
}

type AuthorizeResponse struct {
	// A valid authorization code. Authorization codes are exchanged
	// for OAuth access tokens with the `ObtainToken` endpoint.
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// The same value specified in the request.
	State *string `json:"state,omitempty" url:"state,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AuthorizeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AuthorizeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthorizeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthorizeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthorizeResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// When you direct your user to the permissions form, you specify the
// scope of the permissions your application will have. Personal access tokens
// have all available permissions (at the time the application was created) by default.
//
// **Important:** Never request more than the minimum permissions required for your application
// to function properly.
type OAuthPermission string

const (
	OAuthPermissionBankAccountsRead                  OAuthPermission = "BANK_ACCOUNTS_READ"
	OAuthPermissionCashDrawerRead                    OAuthPermission = "CASH_DRAWER_READ"
	OAuthPermissionCustomersRead                     OAuthPermission = "CUSTOMERS_READ"
	OAuthPermissionCustomersWrite                    OAuthPermission = "CUSTOMERS_WRITE"
	OAuthPermissionDeviceCredentialManagement        OAuthPermission = "DEVICE_CREDENTIAL_MANAGEMENT"
	OAuthPermissionEmployeesRead                     OAuthPermission = "EMPLOYEES_READ"
	OAuthPermissionEmployeesWrite                    OAuthPermission = "EMPLOYEES_WRITE"
	OAuthPermissionInventoryRead                     OAuthPermission = "INVENTORY_READ"
	OAuthPermissionInventoryWrite                    OAuthPermission = "INVENTORY_WRITE"
	OAuthPermissionItemsRead                         OAuthPermission = "ITEMS_READ"
	OAuthPermissionItemsWrite                        OAuthPermission = "ITEMS_WRITE"
	OAuthPermissionLoyaltyRead                       OAuthPermission = "LOYALTY_READ"
	OAuthPermissionLoyaltyWrite                      OAuthPermission = "LOYALTY_WRITE"
	OAuthPermissionMerchantProfileRead               OAuthPermission = "MERCHANT_PROFILE_READ"
	OAuthPermissionOrdersRead                        OAuthPermission = "ORDERS_READ"
	OAuthPermissionOrdersWrite                       OAuthPermission = "ORDERS_WRITE"
	OAuthPermissionPaymentsRead                      OAuthPermission = "PAYMENTS_READ"
	OAuthPermissionPaymentsWrite                     OAuthPermission = "PAYMENTS_WRITE"
	OAuthPermissionPaymentsWriteAdditionalRecipients OAuthPermission = "PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS"
	OAuthPermissionPaymentsWriteInPerson             OAuthPermission = "PAYMENTS_WRITE_IN_PERSON"
	OAuthPermissionSettlementsRead                   OAuthPermission = "SETTLEMENTS_READ"
	OAuthPermissionTimecardsRead                     OAuthPermission = "TIMECARDS_READ"
	OAuthPermissionTimecardsWrite                    OAuthPermission = "TIMECARDS_WRITE"
	OAuthPermissionTimecardsSettingsRead             OAuthPermission = "TIMECARDS_SETTINGS_READ"
	OAuthPermissionTimecardsSettingsWrite            OAuthPermission = "TIMECARDS_SETTINGS_WRITE"
	OAuthPermissionAppointmentsRead                  OAuthPermission = "APPOINTMENTS_READ"
	OAuthPermissionAppointmentsWrite                 OAuthPermission = "APPOINTMENTS_WRITE"
	OAuthPermissionAppointmentsBusinessSettingsRead  OAuthPermission = "APPOINTMENTS_BUSINESS_SETTINGS_READ"
	OAuthPermissionInvoicesRead                      OAuthPermission = "INVOICES_READ"
	OAuthPermissionInvoicesWrite                     OAuthPermission = "INVOICES_WRITE"
	OAuthPermissionSubscriptionsRead                 OAuthPermission = "SUBSCRIPTIONS_READ"
	OAuthPermissionSubscriptionsWrite                OAuthPermission = "SUBSCRIPTIONS_WRITE"
	OAuthPermissionDisputesRead                      OAuthPermission = "DISPUTES_READ"
	OAuthPermissionDisputesWrite                     OAuthPermission = "DISPUTES_WRITE"
	OAuthPermissionGiftcardsRead                     OAuthPermission = "GIFTCARDS_READ"
	OAuthPermissionGiftcardsWrite                    OAuthPermission = "GIFTCARDS_WRITE"
	OAuthPermissionOnlineStoreSnippetsWrite          OAuthPermission = "ONLINE_STORE_SNIPPETS_WRITE"
	OAuthPermissionOnlineStoreSnippetsRead           OAuthPermission = "ONLINE_STORE_SNIPPETS_READ"
	OAuthPermissionOnlineStoreSiteRead               OAuthPermission = "ONLINE_STORE_SITE_READ"
	OAuthPermissionPaymentsWriteSharedOnfile         OAuthPermission = "PAYMENTS_WRITE_SHARED_ONFILE"
	OAuthPermissionAppointmentsAllRead               OAuthPermission = "APPOINTMENTS_ALL_READ"
	OAuthPermissionAppointmentsAllWrite              OAuthPermission = "APPOINTMENTS_ALL_WRITE"
	OAuthPermissionMerchantProfileWrite              OAuthPermission = "MERCHANT_PROFILE_WRITE"
	OAuthPermissionVendorRead                        OAuthPermission = "VENDOR_READ"
	OAuthPermissionVendorWrite                       OAuthPermission = "VENDOR_WRITE"
	OAuthPermissionPayoutsRead                       OAuthPermission = "PAYOUTS_READ"
	OAuthPermissionReservationsRead                  OAuthPermission = "RESERVATIONS_READ"
	OAuthPermissionReservationsWrite                 OAuthPermission = "RESERVATIONS_WRITE"
)

func NewOAuthPermissionFromString(s string) (OAuthPermission, error) {
	switch s {
	case "BANK_ACCOUNTS_READ":
		return OAuthPermissionBankAccountsRead, nil
	case "CASH_DRAWER_READ":
		return OAuthPermissionCashDrawerRead, nil
	case "CUSTOMERS_READ":
		return OAuthPermissionCustomersRead, nil
	case "CUSTOMERS_WRITE":
		return OAuthPermissionCustomersWrite, nil
	case "DEVICE_CREDENTIAL_MANAGEMENT":
		return OAuthPermissionDeviceCredentialManagement, nil
	case "EMPLOYEES_READ":
		return OAuthPermissionEmployeesRead, nil
	case "EMPLOYEES_WRITE":
		return OAuthPermissionEmployeesWrite, nil
	case "INVENTORY_READ":
		return OAuthPermissionInventoryRead, nil
	case "INVENTORY_WRITE":
		return OAuthPermissionInventoryWrite, nil
	case "ITEMS_READ":
		return OAuthPermissionItemsRead, nil
	case "ITEMS_WRITE":
		return OAuthPermissionItemsWrite, nil
	case "LOYALTY_READ":
		return OAuthPermissionLoyaltyRead, nil
	case "LOYALTY_WRITE":
		return OAuthPermissionLoyaltyWrite, nil
	case "MERCHANT_PROFILE_READ":
		return OAuthPermissionMerchantProfileRead, nil
	case "ORDERS_READ":
		return OAuthPermissionOrdersRead, nil
	case "ORDERS_WRITE":
		return OAuthPermissionOrdersWrite, nil
	case "PAYMENTS_READ":
		return OAuthPermissionPaymentsRead, nil
	case "PAYMENTS_WRITE":
		return OAuthPermissionPaymentsWrite, nil
	case "PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS":
		return OAuthPermissionPaymentsWriteAdditionalRecipients, nil
	case "PAYMENTS_WRITE_IN_PERSON":
		return OAuthPermissionPaymentsWriteInPerson, nil
	case "SETTLEMENTS_READ":
		return OAuthPermissionSettlementsRead, nil
	case "TIMECARDS_READ":
		return OAuthPermissionTimecardsRead, nil
	case "TIMECARDS_WRITE":
		return OAuthPermissionTimecardsWrite, nil
	case "TIMECARDS_SETTINGS_READ":
		return OAuthPermissionTimecardsSettingsRead, nil
	case "TIMECARDS_SETTINGS_WRITE":
		return OAuthPermissionTimecardsSettingsWrite, nil
	case "APPOINTMENTS_READ":
		return OAuthPermissionAppointmentsRead, nil
	case "APPOINTMENTS_WRITE":
		return OAuthPermissionAppointmentsWrite, nil
	case "APPOINTMENTS_BUSINESS_SETTINGS_READ":
		return OAuthPermissionAppointmentsBusinessSettingsRead, nil
	case "INVOICES_READ":
		return OAuthPermissionInvoicesRead, nil
	case "INVOICES_WRITE":
		return OAuthPermissionInvoicesWrite, nil
	case "SUBSCRIPTIONS_READ":
		return OAuthPermissionSubscriptionsRead, nil
	case "SUBSCRIPTIONS_WRITE":
		return OAuthPermissionSubscriptionsWrite, nil
	case "DISPUTES_READ":
		return OAuthPermissionDisputesRead, nil
	case "DISPUTES_WRITE":
		return OAuthPermissionDisputesWrite, nil
	case "GIFTCARDS_READ":
		return OAuthPermissionGiftcardsRead, nil
	case "GIFTCARDS_WRITE":
		return OAuthPermissionGiftcardsWrite, nil
	case "ONLINE_STORE_SNIPPETS_WRITE":
		return OAuthPermissionOnlineStoreSnippetsWrite, nil
	case "ONLINE_STORE_SNIPPETS_READ":
		return OAuthPermissionOnlineStoreSnippetsRead, nil
	case "ONLINE_STORE_SITE_READ":
		return OAuthPermissionOnlineStoreSiteRead, nil
	case "PAYMENTS_WRITE_SHARED_ONFILE":
		return OAuthPermissionPaymentsWriteSharedOnfile, nil
	case "APPOINTMENTS_ALL_READ":
		return OAuthPermissionAppointmentsAllRead, nil
	case "APPOINTMENTS_ALL_WRITE":
		return OAuthPermissionAppointmentsAllWrite, nil
	case "MERCHANT_PROFILE_WRITE":
		return OAuthPermissionMerchantProfileWrite, nil
	case "VENDOR_READ":
		return OAuthPermissionVendorRead, nil
	case "VENDOR_WRITE":
		return OAuthPermissionVendorWrite, nil
	case "PAYOUTS_READ":
		return OAuthPermissionPayoutsRead, nil
	case "RESERVATIONS_READ":
		return OAuthPermissionReservationsRead, nil
	case "RESERVATIONS_WRITE":
		return OAuthPermissionReservationsWrite, nil
	}
	var t OAuthPermission
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (o OAuthPermission) Ptr() *OAuthPermission {
	return &o
}

type ObtainTokenResponse struct {
	// A valid OAuth access token. OAuth access tokens are 64 bytes long.
	// Provide the access token in a header with every request to Connect API
	// endpoints. For more information, see [OAuth API: Walkthrough](https://developer.squareup.com/docs/oauth-api/walkthrough).
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// This value is always _bearer_.
	TokenType *string `json:"token_type,omitempty" url:"token_type,omitempty"`
	// The date when the `access_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The ID of the authorizing merchant's business.
	MerchantId *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// **LEGACY FIELD**. The ID of a subscription plan the merchant signed up
	// for. The ID is only present if the merchant signed up for a subscription plan during authorization.
	SubscriptionId *string `json:"subscription_id,omitempty" url:"subscription_id,omitempty"`
	// **LEGACY FIELD**. The ID of the subscription plan the merchant signed
	// up for. The ID is only present if the merchant signed up for a subscription plan during
	// authorization.
	PlanId *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// The OpenID token belonging to this person. This token is only present if the
	// OPENID scope is included in the authorization request.
	IdToken *string `json:"id_token,omitempty" url:"id_token,omitempty"`
	// A refresh token. OAuth refresh tokens are 64 bytes long.
	// For more information, see [Refresh, Revoke, and Limit the Scope of OAuth Tokens](https://developer.squareup.com/docs/oauth-api/refresh-revoke-limit-scope).
	RefreshToken *string `json:"refresh_token,omitempty" url:"refresh_token,omitempty"`
	// A Boolean indicating that the access token is a short-lived access token.
	// The short-lived access token returned in the response expires in 24 hours.
	ShortLived *bool `json:"short_lived,omitempty" url:"short_lived,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The date when the `refresh_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
	RefreshTokenExpiresAt *string `json:"refresh_token_expires_at,omitempty" url:"refresh_token_expires_at,omitempty"`
	// The subscription id of a v2 subscription the merchant signed up
	// for. The subscription id is only present if the merchant signed up for a subscription during authorization.
	AppSubscriptionId *string `json:"app_subscription_id,omitempty" url:"app_subscription_id,omitempty"`
	// The plan id of a v2 subscription plan the merchant signed up
	// for. The plan id is only present if the merchant signed up for a subscription plan during authorization.
	AppPlanId *string `json:"app_plan_id,omitempty" url:"app_plan_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *ObtainTokenResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *ObtainTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ObtainTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = ObtainTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *ObtainTokenResponse) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type RenewTokenResponse struct {
	// The renewed access token.
	// This value might be different from the `access_token` you provided in your request.
	// You provide this token in a header with every request to Connect API endpoints.
	// See [Request and response headers](https://developer.squareup.com/docs/api/connect/v2/#requestandresponseheaders) for the format of this header.
	AccessToken *string `json:"access_token,omitempty" url:"access_token,omitempty"`
	// This value is always _bearer_.
	TokenType *string `json:"token_type,omitempty" url:"token_type,omitempty"`
	// The date when the `access_token` expires, in [ISO 8601](http://www.iso.org/iso/home/standards/iso8601.htm) format.
	ExpiresAt *string `json:"expires_at,omitempty" url:"expires_at,omitempty"`
	// The ID of the authorizing merchant's business.
	MerchantId *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// **LEGACY FIELD**. The ID of the merchant subscription associated with
	// the authorization. The ID is only present if the merchant signed up for a subscription
	// during authorization.
	SubscriptionId *string `json:"subscription_id,omitempty" url:"subscription_id,omitempty"`
	// **LEGACY FIELD**. The ID of the subscription plan the merchant signed
	// up for. The ID is only present if the merchant signed up for a subscription plan during
	// authorization.
	PlanId *string `json:"plan_id,omitempty" url:"plan_id,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RenewTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RenewTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RenewTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RenewTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RenewTokenResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RevokeTokenResponse struct {
	// If the request is successful, this is `true`.
	Success *bool `json:"success,omitempty" url:"success,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RevokeTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RevokeTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RevokeTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RevokeTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevokeTokenResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
