// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type PayoutsListEntriesRequest struct {
	// The order in which payout entries are listed.
	SortOrder *SortOrder `json:"-" url:"sort_order,omitempty"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for the original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	// If request parameters change between requests, subsequent results may contain duplicates or missing records.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of results to be returned in a single page.
	// It is possible to receive fewer results than the specified limit on a given page.
	// The default value of 100 is also the maximum allowed value. If the provided value is
	// greater than 100, it is ignored and the default value is used instead.
	// Default: `100`
	Limit *int `json:"-" url:"limit,omitempty"`
}

type PayoutsListRequest struct {
	// The ID of the location for which to list the payouts.
	// By default, payouts are returned for the default (main) location associated with the seller.
	LocationId *string `json:"-" url:"location_id,omitempty"`
	// If provided, only payouts with the given status are returned.
	Status *PayoutStatus `json:"-" url:"status,omitempty"`
	// The timestamp for the beginning of the payout creation time, in RFC 3339 format.
	// Inclusive. Default: The current time minus one year.
	BeginTime *string `json:"-" url:"begin_time,omitempty"`
	// The timestamp for the end of the payout creation time, in RFC 3339 format.
	// Default: The current time.
	EndTime *string `json:"-" url:"end_time,omitempty"`
	// The order in which payouts are listed.
	SortOrder *SortOrder `json:"-" url:"sort_order,omitempty"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for the original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	// If request parameters change between requests, subsequent results may contain duplicates or missing records.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of results to be returned in a single page.
	// It is possible to receive fewer results than the specified limit on a given page.
	// The default value of 100 is also the maximum allowed value. If the provided value is
	// greater than 100, it is ignored and the default value is used instead.
	// Default: `100`
	Limit *int `json:"-" url:"limit,omitempty"`
}

type GetPayoutResponse struct {
	// The requested payout.
	Payout *Payout `json:"payout,omitempty" url:"payout,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPayoutResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPayoutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPayoutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPayoutResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPayoutResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// The response to retrieve payout records entries.
type ListPayoutEntriesResponse struct {
	// The requested list of payout entries, ordered with the given or default sort order.
	PayoutEntries []*PayoutEntry `json:"payout_entries,omitempty" url:"payout_entries,omitempty"`
	// The pagination cursor to be used in a subsequent request. If empty, this is the final response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPayoutEntriesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPayoutEntriesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPayoutEntriesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPayoutEntriesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPayoutEntriesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The response to retrieve payout records entries.
type ListPayoutsResponse struct {
	// The requested list of payouts.
	Payouts []*Payout `json:"payouts,omitempty" url:"payouts,omitempty"`
	// The pagination cursor to be used in a subsequent request. If empty, this is the final response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPayoutsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPayoutsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPayoutsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPayoutsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPayoutsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Payout status types
type PayoutStatus string

const (
	PayoutStatusUnknownPayoutStatusDoNotUse PayoutStatus = "UNKNOWN_PAYOUT_STATUS_DO_NOT_USE"
	PayoutStatusSent                        PayoutStatus = "SENT"
	PayoutStatusFailed                      PayoutStatus = "FAILED"
	PayoutStatusPaid                        PayoutStatus = "PAID"
)

func NewPayoutStatusFromString(s string) (PayoutStatus, error) {
	switch s {
	case "UNKNOWN_PAYOUT_STATUS_DO_NOT_USE":
		return PayoutStatusUnknownPayoutStatusDoNotUse, nil
	case "SENT":
		return PayoutStatusSent, nil
	case "FAILED":
		return PayoutStatusFailed, nil
	case "PAID":
		return PayoutStatusPaid, nil
	}
	var t PayoutStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PayoutStatus) Ptr() *PayoutStatus {
	return &p
}
