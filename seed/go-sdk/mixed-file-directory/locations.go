// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type CreateCheckoutRequest struct {
	// A unique string that identifies this checkout among others you have created. It can be
	// any valid string but must be unique for every order sent to Square Checkout for a given location ID.
	//
	// The idempotency key is used to avoid processing the same order more than once. If you are
	// unsure whether a particular checkout was created successfully, you can attempt it again with
	// the same idempotency key and all the same other parameters without worrying about creating duplicates.
	//
	// You should use a random number/string generator native to the language
	// you are working in to generate strings for your idempotency keys.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The order including line items to be checked out.
	Order *CreateOrderRequest `json:"order,omitempty" url:"-"`
	// If `true`, Square Checkout collects shipping information on your behalf and stores
	// that information with the transaction information in the Square Seller Dashboard.
	//
	// Default: `false`.
	AskForShippingAddress *bool `json:"ask_for_shipping_address,omitempty" url:"-"`
	// The email address to display on the Square Checkout confirmation page
	// and confirmation email that the buyer can use to contact the seller.
	//
	// If this value is not set, the confirmation page and email display the
	// primary email address associated with the seller's Square account.
	//
	// Default: none; only exists if explicitly set.
	MerchantSupportEmail *string `json:"merchant_support_email,omitempty" url:"-"`
	// If provided, the buyer's email is prepopulated on the checkout page
	// as an editable text field.
	//
	// Default: none; only exists if explicitly set.
	PrePopulateBuyerEmail *string `json:"pre_populate_buyer_email,omitempty" url:"-"`
	// If provided, the buyer's shipping information is prepopulated on the
	// checkout page as editable text fields.
	//
	// Default: none; only exists if explicitly set.
	PrePopulateShippingAddress *Address `json:"pre_populate_shipping_address,omitempty" url:"-"`
	// The URL to redirect to after the checkout is completed with `checkoutId`,
	// `transactionId`, and `referenceId` appended as URL parameters. For example,
	// if the provided redirect URL is `http://www.example.com/order-complete`, a
	// successful transaction redirects the customer to:
	//
	// `http://www.example.com/order-complete?checkoutId=xxxxxx&amp;referenceId=xxxxxx&amp;transactionId=xxxxxx`
	//
	// If you do not provide a redirect URL, Square Checkout displays an order
	// confirmation page on your behalf; however, it is strongly recommended that
	// you provide a redirect URL so you can verify the transaction results and
	// finalize the order through your existing/normal confirmation workflow.
	//
	// Default: none; only exists if explicitly set.
	RedirectUrl *string `json:"redirect_url,omitempty" url:"-"`
	// The basic primitive of a multi-party transaction. The value is optional.
	// The transaction facilitated by you can be split from here.
	//
	// If you provide this value, the `amount_money` value in your `additional_recipients` field
	// cannot be more than 90% of the `total_money` calculated by Square for your order.
	// The `location_id` must be a valid seller location where the checkout is occurring.
	//
	// This field requires `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission.
	//
	// This field is currently not supported in the Square Sandbox.
	AdditionalRecipients []*ChargeRequestAdditionalRecipient `json:"additional_recipients,omitempty" url:"-"`
	// An optional note to associate with the `checkout` object.
	//
	// This value cannot exceed 60 characters.
	Note *string `json:"note,omitempty" url:"-"`
}

type CreateLocationRequest struct {
	// The initial values of the location being created. The `name` field is required and must be unique within a seller account.
	// All other fields are optional, but any information you care about for the location should be included.
	// The remaining fields are automatically added based on the data from the [main location](https://developer.squareup.com/docs/locations-api#about-the-main-location).
	Location *Location `json:"location,omitempty" url:"-"`
}

// Represents an additional recipient (other than the merchant) entitled to a portion of the tender.
// Support is currently limited to USD, CAD and GBP currencies
type ChargeRequestAdditionalRecipient struct {
	// The location ID for a recipient (other than the merchant) receiving a portion of the tender.
	LocationId string `json:"location_id" url:"location_id"`
	// The description of the additional recipient.
	Description string `json:"description" url:"description"`
	// The amount of money distributed to the recipient.
	AmountMoney *Money `json:"amount_money,omitempty" url:"amount_money,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ChargeRequestAdditionalRecipient) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ChargeRequestAdditionalRecipient) UnmarshalJSON(data []byte) error {
	type unmarshaler ChargeRequestAdditionalRecipient
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ChargeRequestAdditionalRecipient(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ChargeRequestAdditionalRecipient) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that are included in the response body of
// a request to the `CreateCheckout` endpoint.
type CreateCheckoutResponse struct {
	// The newly created `checkout` object associated with the provided idempotency key.
	Checkout *Checkout `json:"checkout,omitempty" url:"checkout,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateCheckoutResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCheckoutResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCheckoutResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCheckoutResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCheckoutResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The response object returned by the [CreateLocation](api-endpoint:Locations-CreateLocation) endpoint.
type CreateLocationResponse struct {
	// Information about [errors](https://developer.squareup.com/docs/build-basics/handling-errors) encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The newly created `Location` object.
	Location *Location `json:"location,omitempty" url:"location,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateLocationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateLocationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateLocationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateLocationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateLocationResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that the [RetrieveLocation](api-endpoint:Locations-RetrieveLocation)
// endpoint returns in a response.
type GetLocationResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested location.
	Location *Location `json:"location,omitempty" url:"location,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetLocationResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetLocationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetLocationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetLocationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetLocationResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Defines the fields that are included in the response body of a request
// to the [ListLocations](api-endpoint:Locations-ListLocations) endpoint.
//
// Either `errors` or `locations` is present in a given response (never both).
type ListLocationsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The business locations.
	Locations []*Location `json:"locations,omitempty" url:"locations,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListLocationsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListLocationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListLocationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListLocationsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListLocationsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Represents one of a business' [locations](https://developer.squareup.com/docs/locations-api).
type Location struct {
	// A short generated string of letters and numbers that uniquely identifies this location instance.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The name of the location.
	// This information appears in the Seller Dashboard as the nickname.
	// A location name must be unique within a seller account.
	Name *string `json:"name,omitempty" url:"name,omitempty"`
	// The physical address of the location.
	Address *Address `json:"address,omitempty" url:"address,omitempty"`
	// The [IANA time zone](https://www.iana.org/time-zones) identifier for
	// the time zone of the location. For example, `America/Los_Angeles`.
	Timezone *string `json:"timezone,omitempty" url:"timezone,omitempty"`
	// The Square features that are enabled for the location.
	// See [LocationCapability](entity:LocationCapability) for possible values.
	// See [LocationCapability](#type-locationcapability) for possible values
	Capabilities []LocationCapability `json:"capabilities,omitempty" url:"capabilities,omitempty"`
	// The status of the location.
	// See [LocationStatus](#type-locationstatus) for possible values
	Status *LocationStatus `json:"status,omitempty" url:"status,omitempty"`
	// The time when the location was created, in RFC 3339 format.
	// For more information, see [Working with Dates](https://developer.squareup.com/docs/build-basics/working-with-dates).
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The ID of the merchant that owns the location.
	MerchantId *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// The country of the location, in the two-letter format of ISO 3166. For example, `US` or `JP`.
	//
	// See [Country](entity:Country) for possible values.
	// See [Country](#type-country) for possible values
	Country *Country `json:"country,omitempty" url:"country,omitempty"`
	// The language associated with the location, in
	// [BCP 47 format](https://tools.ietf.org/html/bcp47#appendix-A).
	// For more information, see [Language Preferences](https://developer.squareup.com/docs/build-basics/general-considerations/language-preferences).
	LanguageCode *string `json:"language_code,omitempty" url:"language_code,omitempty"`
	// The currency used for all transactions at this location,
	// in ISO 4217 format. For example, the currency code for US dollars is `USD`.
	// See [Currency](entity:Currency) for possible values.
	// See [Currency](#type-currency) for possible values
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	// The phone number of the location. For example, `+1 855-700-6000`.
	PhoneNumber *string `json:"phone_number,omitempty" url:"phone_number,omitempty"`
	// The name of the location's overall business. This name is present on receipts and other customer-facing branding.
	BusinessName *string `json:"business_name,omitempty" url:"business_name,omitempty"`
	// The type of the location.
	// See [LocationType](#type-locationtype) for possible values
	Type *LocationType `json:"type,omitempty" url:"type,omitempty"`
	// The website URL of the location. For example, `https://squareup.com`.
	WebsiteUrl *string `json:"website_url,omitempty" url:"website_url,omitempty"`
	// The hours of operation for the location.
	BusinessHours *BusinessHours `json:"business_hours,omitempty" url:"business_hours,omitempty"`
	// The email address of the location. This can be unique to the location and is not always the email address for the business owner or administrator.
	BusinessEmail *string `json:"business_email,omitempty" url:"business_email,omitempty"`
	// The description of the location. For example, `Main Street location`.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The Twitter username of the location without the '@' symbol. For example, `Square`.
	TwitterUsername *string `json:"twitter_username,omitempty" url:"twitter_username,omitempty"`
	// The Instagram username of the location without the '@' symbol. For example, `square`.
	InstagramUsername *string `json:"instagram_username,omitempty" url:"instagram_username,omitempty"`
	// The Facebook profile URL of the location. The URL should begin with 'facebook.com/'. For example, `https://www.facebook.com/square`.
	FacebookUrl *string `json:"facebook_url,omitempty" url:"facebook_url,omitempty"`
	// The physical coordinates (latitude and longitude) of the location.
	Coordinates *Coordinates `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	// The URL of the logo image for the location. When configured in the Seller
	// Dashboard (Receipts section), the logo appears on transactions (such as receipts and invoices) that Square generates on behalf of the seller.
	// This image should have a roughly square (1:1) aspect ratio and should be at least 200x200 pixels.
	LogoUrl *string `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	// The URL of the Point of Sale background image for the location.
	PosBackgroundUrl *string `json:"pos_background_url,omitempty" url:"pos_background_url,omitempty"`
	// A four-digit number that describes the kind of goods or services sold at the location.
	// The [merchant category code (MCC)](https://developer.squareup.com/docs/locations-api#initialize-a-merchant-category-code) of the location as standardized by ISO 18245.
	// For example, `5045`, for a location that sells computer goods and software.
	Mcc *string `json:"mcc,omitempty" url:"mcc,omitempty"`
	// The URL of a full-format logo image for the location. When configured in the Seller
	// Dashboard (Receipts section), the logo appears on transactions (such as receipts and invoices) that Square generates on behalf of the seller.
	// This image can be wider than it is tall and should be at least 1280x648 pixels.
	FullFormatLogoUrl *string `json:"full_format_logo_url,omitempty" url:"full_format_logo_url,omitempty"`
	// The tax IDs for this location.
	TaxIds *TaxIds `json:"tax_ids,omitempty" url:"tax_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *Location) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Location) UnmarshalJSON(data []byte) error {
	type unmarshaler Location
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Location(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *Location) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// The response object returned by the [UpdateLocation](api-endpoint:Locations-UpdateLocation) endpoint.
type UpdateLocationResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The updated `Location` object.
	Location *Location `json:"location,omitempty" url:"location,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateLocationResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateLocationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateLocationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateLocationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateLocationResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateLocationRequest struct {
	// The `Location` object with only the fields to update.
	Location *Location `json:"location,omitempty" url:"-"`
}
