// This file was auto-generated by Fern from our API Definition.

package vendors

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates one or more [Vendor](entity:Vendor) objects to represent suppliers to a seller.
func (c *Client) BatchCreate(
	ctx context.Context,
	request *fern.BatchCreateVendorsRequest,
	opts ...option.RequestOption,
) (*fern.BatchCreateVendorsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/vendors/bulk-create"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.BatchCreateVendorsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves one or more vendors of specified [Vendor](entity:Vendor) IDs.
func (c *Client) BatchGet(
	ctx context.Context,
	request *fern.BatchGetVendorsRequest,
	opts ...option.RequestOption,
) (*fern.BatchGetVendorsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/vendors/bulk-retrieve"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.BatchGetVendorsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates one or more of existing [Vendor](entity:Vendor) objects as suppliers to a seller.
func (c *Client) BatchUpdate(
	ctx context.Context,
	request *fern.BatchUpdateVendorsRequest,
	opts ...option.RequestOption,
) (*fern.BatchUpdateVendorsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/vendors/bulk-update"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.BatchUpdateVendorsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a single [Vendor](entity:Vendor) object to represent a supplier to a seller.
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateVendorRequest,
	opts ...option.RequestOption,
) (*fern.CreateVendorResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/vendors/create"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateVendorResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches for vendors using a filter against supported [Vendor](entity:Vendor) properties and a supported sorter.
func (c *Client) Search(
	ctx context.Context,
	request *fern.SearchVendorsRequest,
	opts ...option.RequestOption,
) (*fern.SearchVendorsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/vendors/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SearchVendorsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves the vendor of a specified [Vendor](entity:Vendor) ID.
func (c *Client) Get(
	ctx context.Context,
	// ID of the [Vendor](entity:Vendor) to retrieve.
	vendorId string,
	opts ...option.RequestOption,
) (*fern.GetVendorResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/vendors/%v", vendorId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetVendorResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates an existing [Vendor](entity:Vendor) object as a supplier to a seller.
func (c *Client) Update(
	ctx context.Context,
	// ID of the [Vendor](entity:Vendor) to retrieve.
	vendorId string,
	request *fern.UpdateVendorRequest,
	opts ...option.RequestOption,
) (*fern.UpdateVendorResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/vendors/%v", vendorId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateVendorResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
