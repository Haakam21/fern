// This file was auto-generated by Fern from our API Definition.

package invoices

import (
	context "context"
	fmt "fmt"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Returns a list of invoices for a given location. The response
// is paginated. If truncated, the response includes a `cursor` that you
// use in a subsequent request to retrieve the next set of invoices.
func (c *Client) List(
	ctx context.Context,
	request *fern.InvoicesListRequest,
	opts ...option.RequestOption,
) (*core.Page[*fern.Invoice], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/invoices"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	prepareCall := func(pageRequest *core.PageRequest[*string]) *core.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &core.CallParams{
			URL:         nextURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    pageRequest.Response,
		}
	}
	readPageResponse := func(response *fern.ListInvoicesResponse) *core.PageResponse[*string, *fern.Invoice] {
		next := response.Cursor
		results := response.Invoices
		return &core.PageResponse[*string, *fern.Invoice]{
			Next:    next,
			Results: results,
		}
	}
	pager := core.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a draft [invoice](entity:Invoice)
// for an order created using the Orders API.
//
// A draft invoice remains in your account and no action is taken.
// You must publish the invoice before Square can process it (send it to the customer's email address or charge the customerâ€™s card on file).
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateInvoiceRequest,
	opts ...option.RequestOption,
) (*fern.CreateInvoiceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/invoices"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateInvoiceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches for invoices from a location specified in
// the filter. You can optionally specify customers in the filter for whom to
// retrieve invoices. In the current implementation, you can only specify one location and
// optionally one customer.
//
// The response is paginated. If truncated, the response includes a `cursor`
// that you use in a subsequent request to retrieve the next set of invoices.
func (c *Client) Search(
	ctx context.Context,
	request *fern.SearchInvoicesRequest,
	opts ...option.RequestOption,
) (*fern.SearchInvoicesResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/invoices/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SearchInvoicesResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves an invoice by invoice ID.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the invoice to retrieve.
	invoiceId string,
	opts ...option.RequestOption,
) (*fern.GetInvoiceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/invoices/%v", invoiceId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetInvoiceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates an invoice by modifying fields, clearing fields, or both. For most updates, you can use a sparse
// `Invoice` object to add fields or change values and use the `fields_to_clear` field to specify fields to clear.
// However, some restrictions apply. For example, you cannot change the `order_id` or `location_id` field and you
// must provide the complete `custom_fields` list to update a custom field. Published invoices have additional restrictions.
func (c *Client) Update(
	ctx context.Context,
	// The ID of the invoice to update.
	invoiceId string,
	request *fern.UpdateInvoiceRequest,
	opts ...option.RequestOption,
) (*fern.UpdateInvoiceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/invoices/%v", invoiceId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateInvoiceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes the specified invoice. When an invoice is deleted, the
// associated order status changes to CANCELED. You can only delete a draft
// invoice (you cannot delete a published invoice, including one that is scheduled for processing).
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the invoice to delete.
	invoiceId string,
	request *fern.InvoicesDeleteRequest,
	opts ...option.RequestOption,
) (*fern.DeleteInvoiceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/invoices/%v", invoiceId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.DeleteInvoiceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Cancels an invoice. The seller cannot collect payments for
// the canceled invoice.
//
// You cannot cancel an invoice in the `DRAFT` state or in a terminal state: `PAID`, `REFUNDED`, `CANCELED`, or `FAILED`.
func (c *Client) Cancel(
	ctx context.Context,
	// The ID of the [invoice](entity:Invoice) to cancel.
	invoiceId string,
	request *fern.CancelInvoiceRequest,
	opts ...option.RequestOption,
) (*fern.CancelInvoiceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/invoices/%v/cancel", invoiceId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CancelInvoiceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Publishes the specified draft invoice.
//
// After an invoice is published, Square
// follows up based on the invoice configuration. For example, Square
// sends the invoice to the customer's email address, charges the customer's card on file, or does
// nothing. Square also makes the invoice available on a Square-hosted invoice page.
//
// The invoice `status` also changes from `DRAFT` to a status
// based on the invoice configuration. For example, the status changes to `UNPAID` if
// Square emails the invoice or `PARTIALLY_PAID` if Square charge a card on file for a portion of the
// invoice amount.
func (c *Client) Publisb(
	ctx context.Context,
	// The ID of the invoice to publish.
	invoiceId string,
	request *fern.PublishInvoiceRequest,
	opts ...option.RequestOption,
) (*fern.PublishInvoiceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/invoices/%v/publish", invoiceId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.PublishInvoiceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
