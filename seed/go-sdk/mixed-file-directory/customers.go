// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type BatchUpsertCustomerCustomAttributesRequest struct {
	// A map containing 1 to 25 individual upsert requests. For each request, provide an
	// arbitrary ID that is unique for this `BulkUpsertCustomerCustomAttributes` request and the
	// information needed to create or update a custom attribute.
	Values map[string]*BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest `json:"values,omitempty" url:"-"`
}

type CreateCustomerRequest struct {
	// The idempotency key for the request.	For more information, see
	// [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
	// The given name (that is, the first name) associated with the customer profile.
	GivenName *string `json:"given_name,omitempty" url:"-"`
	// The family name (that is, the last name) associated with the customer profile.
	FamilyName *string `json:"family_name,omitempty" url:"-"`
	// A business name associated with the customer profile.
	CompanyName *string `json:"company_name,omitempty" url:"-"`
	// A nickname for the customer profile.
	Nickname *string `json:"nickname,omitempty" url:"-"`
	// The email address associated with the customer profile.
	EmailAddress *string `json:"email_address,omitempty" url:"-"`
	// The physical address associated with the customer profile.
	Address *Address `json:"address,omitempty" url:"-"`
	// The phone number associated with the customer profile. A phone number can contain 9â€“16 digits, with an optional `+` prefix.
	PhoneNumber *string `json:"phone_number,omitempty" url:"-"`
	// An optional second ID used to associate the customer profile with an
	// entity in another system.
	ReferenceId *string `json:"reference_id,omitempty" url:"-"`
	// A custom note associated with the customer profile.
	Note *string `json:"note,omitempty" url:"-"`
	// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
	// For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
	// You can also specify this value in `YYYY-MM-DD` format.
	Birthday *string `json:"birthday,omitempty" url:"-"`
	// The tax ID associated with the customer profile. This field is available only for customers of sellers in EU countries or the United Kingdom.
	// In other countries, this field is ignored when included in a `CreateCustomer` request. For more information,
	// see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).
	TaxIds *CustomerTaxIds `json:"tax_ids,omitempty" url:"-"`
}

type CustomersDeleteRequest struct {
	// The current version of the customer profile.
	//
	// As a best practice, you should include this parameter to enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency) control. For more information, see [Delete a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#delete-customer-profile).
	Version *int64 `json:"-" url:"version,omitempty"`
}

type CustomersListRequest struct {
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
	// If the specified limit is less than 1 or greater than 100, Square returns a `400 VALUE_TOO_LOW` or `400 VALUE_TOO_HIGH` error. The default value is 100.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Limit *int `json:"-" url:"limit,omitempty"`
	// Indicates how customers should be sorted.
	//
	// The default value is `DEFAULT`.
	SortField *CustomerSortField `json:"-" url:"sort_field,omitempty"`
	// Indicates whether customers should be sorted in ascending (`ASC`) or
	// descending (`DESC`) order.
	//
	// The default value is `ASC`.
	SortOrder *SortOrder `json:"-" url:"sort_order,omitempty"`
}

type SearchCustomersRequest struct {
	// Include the pagination cursor in subsequent calls to this endpoint to retrieve
	// the next set of results associated with the original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// The maximum number of results to return in a single page. This limit is advisory. The response might contain more or fewer results.
	// If the specified limit is invalid, Square returns a `400 VALUE_TOO_LOW` or `400 VALUE_TOO_HIGH` error. The default value is 100.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Limit *int64 `json:"limit,omitempty" url:"-"`
	// Query customers based on the given conditions and sort order.
	// Calling `SearchCustomers` without an explicit query parameter returns
	// all customers ordered alphabetically based on `given_name` and
	// `family_name`.
	Query *CustomerQuery `json:"query,omitempty" url:"-"`
}

// Represents an individual upsert request in a [BulkUpsertCustomerCustomAttributes](api-endpoint:CustomerCustomAttributes-BulkUpsertCustomerCustomAttributes)
// request. An individual request contains a customer ID, the custom attribute to create or update,
// and an optional idempotency key.
type BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest struct {
	// The ID of the target [customer profile](entity:Customer).
	CustomerId string `json:"customer_id" url:"customer_id"`
	// The custom attribute to create or update, with following fields:
	//
	//   - `key`. This key must match the `key` of a custom attribute definition in the Square seller
	//     account. If the requesting application is not the definition owner, you must provide the qualified key.
	//
	//   - `value`. This value must conform to the `schema` specified by the definition.
	//     For more information, see [Value data types](https://developer.squareup.com/docs/customer-custom-attributes-api/custom-attributes#value-data-types).
	//
	//   - `version`. To enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency)
	//     control for update operations, include this optional field in the request and set the
	//     value to the current version of the custom attribute.
	CustomAttribute *CustomAttribute `json:"custom_attribute,omitempty" url:"custom_attribute,omitempty"`
	// A unique identifier for this individual upsert request, used to ensure idempotency.
	// For more information, see [Idempotency](https://developer.squareup.com/docs/build-basics/common-api-patterns/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"idempotency_key,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchUpsertCustomerCustomAttributesRequestCustomerCustomAttributeUpsertRequest) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Represents a [BulkUpsertCustomerCustomAttributes](api-endpoint:CustomerCustomAttributes-BulkUpsertCustomerCustomAttributes) response,
// which contains a map of responses that each corresponds to an individual upsert request.
type BatchUpsertCustomerCustomAttributesResponse struct {
	// A map of responses that correspond to individual upsert requests. Each response has the
	// same ID as the corresponding request and contains either a `customer_id` and `custom_attribute` or an `errors` field.
	Values map[string]*BatchUpsertCustomerCustomAttributesResponseCustomerCustomAttributeUpsertResponse `json:"values,omitempty" url:"values,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchUpsertCustomerCustomAttributesResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchUpsertCustomerCustomAttributesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchUpsertCustomerCustomAttributesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchUpsertCustomerCustomAttributesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchUpsertCustomerCustomAttributesResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Defines the fields that are included in the response body of
// a request to the `CreateCustomer` endpoint.
//
// Either `errors` or `customer` is present in a given response (never both).
type CreateCustomerResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The created customer.
	Customer *Customer `json:"customer,omitempty" url:"customer,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateCustomerResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCustomerResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCustomerResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents a query (including filtering criteria, sorting criteria, or both) used to search
// for customer profiles.
type CustomerQuery struct {
	// A list of filtering criteria.
	Filter *CustomerFilter `json:"filter,omitempty" url:"filter,omitempty"`
	// Sorting criteria for query results. The default behavior is to sort
	// customers alphabetically by `given_name` and `family_name`.
	Sort *CustomerSort `json:"sort,omitempty" url:"sort,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CustomerQuery) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomerQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomerQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomerQuery(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomerQuery) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Specifies customer attributes as the sort key to customer profiles returned from a search.
type CustomerSortField string

const (
	CustomerSortFieldDefault   CustomerSortField = "DEFAULT"
	CustomerSortFieldCreatedAt CustomerSortField = "CREATED_AT"
)

func NewCustomerSortFieldFromString(s string) (CustomerSortField, error) {
	switch s {
	case "DEFAULT":
		return CustomerSortFieldDefault, nil
	case "CREATED_AT":
		return CustomerSortFieldCreatedAt, nil
	}
	var t CustomerSortField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CustomerSortField) Ptr() *CustomerSortField {
	return &c
}

// Represents the tax ID associated with a [customer profile](entity:Customer). The corresponding `tax_ids` field is available only for customers of sellers in EU countries or the United Kingdom.
// For more information, see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).
type CustomerTaxIds struct {
	// The EU VAT identification number for the customer. For example, `IE3426675K`. The ID can contain alphanumeric characters only.
	EuVat *string `json:"eu_vat,omitempty" url:"eu_vat,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CustomerTaxIds) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomerTaxIds) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomerTaxIds
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomerTaxIds(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomerTaxIds) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that are included in the response body of
// a request to the `DeleteCustomer` endpoint.
type DeleteCustomerResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteCustomerResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteCustomerResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteCustomerResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Defines the fields that are included in the response body of
// a request to the `RetrieveCustomer` endpoint.
//
// Either `errors` or `customer` is present in a given response (never both).
type GetCustomerResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested customer.
	Customer *Customer `json:"customer,omitempty" url:"customer,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetCustomerResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCustomerResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCustomerResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Defines the fields that are included in the response body of
// a request to the `ListCustomers` endpoint.
//
// Either `errors` or `customers` is present in a given response (never both).
type ListCustomersResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// An array of `Customer` objects that match the provided query.
	Customers []*Customer `json:"customers,omitempty" url:"customers,omitempty"`
	// A pagination cursor to retrieve the next set of results for the
	// original query. A cursor is only present if the request succeeded and additional results
	// are available.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCustomersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCustomersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCustomersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCustomersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCustomersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Defines the fields that are included in the response body of
// a request to the `SearchCustomers` endpoint.
//
// Either `errors` or `customers` is present in a given response (never both).
type SearchCustomersResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// An array of `Customer` objects that match a query.
	Customers []*Customer `json:"customers,omitempty" url:"customers,omitempty"`
	// A pagination cursor that can be used during subsequent calls
	// to `SearchCustomers` to retrieve the next set of results associated
	// with the original query. Pagination cursors are only present when
	// a request succeeds and additional results are available.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/build-basics/common-api-patterns/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchCustomersResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchCustomersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchCustomersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchCustomersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchCustomersResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Defines the fields that are included in the response body of
// a request to the `UpdateCustomer` endpoint.
//
// Either `errors` or `customer` is present in a given response (never both).
type UpdateCustomerResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The updated customer.
	Customer *Customer `json:"customer,omitempty" url:"customer,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateCustomerResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateCustomerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateCustomerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateCustomerResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateCustomerResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateCustomerRequest struct {
	// The given name (that is, the first name) associated with the customer profile.
	GivenName *string `json:"given_name,omitempty" url:"-"`
	// The family name (that is, the last name) associated with the customer profile.
	FamilyName *string `json:"family_name,omitempty" url:"-"`
	// A business name associated with the customer profile.
	CompanyName *string `json:"company_name,omitempty" url:"-"`
	// A nickname for the customer profile.
	Nickname *string `json:"nickname,omitempty" url:"-"`
	// The email address associated with the customer profile.
	EmailAddress *string `json:"email_address,omitempty" url:"-"`
	// The physical address associated with the customer profile. To make any changes to an address, you must provide the complete `Address` object.
	// Sparse updates are not supported for this object, so any fields that are undefined in the request are removed from the object.
	Address *Address `json:"address,omitempty" url:"-"`
	// The phone number associated with the customer profile. A phone number can contain 9â€“16 digits, with an optional `+` prefix.
	PhoneNumber *string `json:"phone_number,omitempty" url:"-"`
	// An optional second ID used to associate the customer profile with an
	// entity in another system.
	ReferenceId *string `json:"reference_id,omitempty" url:"-"`
	// A custom note associated with the customer profile.
	Note *string `json:"note,omitempty" url:"-"`
	// The birthday associated with the customer profile, in RFC 3339 format. The year is optional. The timezone and time are not allowed.
	// For example, `0000-09-21T00:00:00-00:00` represents a birthday on September 21 and `1998-09-21T00:00:00-00:00` represents a birthday on September 21, 1998.
	// You can also specify this value in `YYYY-MM-DD` format.
	Birthday *string `json:"birthday,omitempty" url:"-"`
	// The current version of the customer profile.
	//
	// As a best practice, you should include this field to enable [optimistic concurrency](https://developer.squareup.com/docs/build-basics/common-api-patterns/optimistic-concurrency) control. For more information, see [Update a customer profile](https://developer.squareup.com/docs/customers-api/use-the-api/keep-records#update-a-customer-profile).
	Version *int64 `json:"version,omitempty" url:"-"`
	// The tax ID associated with the customer profile. This field is available only for customers of sellers in EU countries or the United Kingdom.
	// In other countries, this field is ignored when included in an `UpdateCustomer` request. For more information,
	// see [Customer tax IDs](https://developer.squareup.com/docs/customers-api/what-it-does#customer-tax-ids).
	TaxIds *CustomerTaxIds `json:"tax_ids,omitempty" url:"-"`
}
