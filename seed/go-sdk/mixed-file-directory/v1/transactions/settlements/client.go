// This file was auto-generated by Fern from our API Definition.

package settlements

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	transactions "github.com/mixed-file-directory/fern/v1/transactions"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Provides summary information for all deposits and withdrawals
// initiated by Square to a linked bank account during a date range. Date
// ranges cannot exceed one year in length.
//
// \*Note\*\*: the ListSettlements endpoint does not provide entry
// information.
func (c *Client) List(
	ctx context.Context,
	// The ID of the location to list settlements for. If you specify me, this endpoint returns settlements aggregated from all of the business's locations.
	locationId string,
	request *transactions.SettlementsListRequest,
	opts ...option.RequestOption,
) ([]*fern.V1Settlement, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/%v/settlements", locationId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response []*fern.V1Settlement
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Provides comprehensive information for a single settlement.
//
// The returned `Settlement` objects include an `entries` field that lists
// the transactions that contribute to the settlement total. Most
// settlement entries correspond to a payment payout, but settlement
// entries are also generated for less common events, like refunds, manual
// adjustments, or chargeback holds.
//
// Square initiates its regular deposits as indicated in the
// [Deposit Options with Square](https://squareup.com/help/us/en/article/3807)
// help article. Details for a regular deposit are usually not available
// from Connect API endpoints before 10 p.m. PST the same day.
//
// Square does not know when an initiated settlement **completes**, only
// whether it has failed. A completed settlement is typically reflected in
// a bank account within 3 business days, but in exceptional cases it may
// take longer.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the settlements's associated location.
	locationId string,
	// The settlement's Square-issued ID. You obtain this value from Settlement objects returned by the List Settlements endpoint.
	settlementId string,
	opts ...option.RequestOption,
) (*fern.V1Settlement, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v1/%v/settlements/%v",
		locationId,
		settlementId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.V1Settlement
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
