// This file was auto-generated by Fern from our API Definition.

package refunds

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	transactions "github.com/mixed-file-directory/fern/v1/transactions"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Provides the details for all refunds initiated by a merchant or any of the merchant's mobile staff during a date range. Date ranges cannot exceed one year in length.
func (c *Client) List(
	ctx context.Context,
	// The ID of the location to list refunds for.
	locationId string,
	request *transactions.RefundsListRequest,
	opts ...option.RequestOption,
) ([]*fern.V1Refund, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/%v/refunds", locationId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response []*fern.V1Refund
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Issues a refund for a previously processed payment. You must issue
// a refund within 60 days of the associated payment.
//
// You cannot issue a partial refund for a split tender payment. You must
// instead issue a full or partial refund for a particular tender, by
// providing the applicable tender id to the V1CreateRefund endpoint.
// Issuing a full refund for a split tender payment refunds all tenders
// associated with the payment.
//
// Issuing a refund for a card payment is not reversible. For development
// purposes, you can create fake cash payments in Square Point of Sale and
// refund them.
func (c *Client) Create(
	ctx context.Context,
	// The ID of the original payment's associated location.
	locationId string,
	request *transactions.V1CreateRefundRequest,
	opts ...option.RequestOption,
) (*fern.V1Refund, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/%v/refunds", locationId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.V1Refund
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
