// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

// Represents a `DeleteSnippet` response.
type DeleteSnippetResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteSnippetResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteSnippetResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteSnippetResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Represents a `RetrieveSnippet` response. The response can include either `snippet` or `errors`.
type GetSnippetResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The retrieved snippet.
	Snippet *Snippet `json:"snippet,omitempty" url:"snippet,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSnippetResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSnippetResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSnippetResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Represents the snippet that is added to a Square Online site. The snippet code is injected into the `head` element of all pages on the site, except for checkout pages.
type Snippet struct {
	// The Square-assigned ID for the snippet.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The ID of the site that contains the snippet.
	SiteId *string `json:"site_id,omitempty" url:"site_id,omitempty"`
	// The snippet code, which can contain valid HTML, JavaScript, or both.
	Content string `json:"content" url:"content"`
	// The timestamp of when the snippet was initially added to the site, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp of when the snippet was last updated on the site, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Snippet) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Snippet) UnmarshalJSON(data []byte) error {
	type unmarshaler Snippet
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Snippet(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Snippet) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Represents an `UpsertSnippet` response. The response can include either `snippet` or `errors`.
type UpsertSnippetResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The new or updated snippet.
	Snippet *Snippet `json:"snippet,omitempty" url:"snippet,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpsertSnippetResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpsertSnippetResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpsertSnippetResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpsertSnippetResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpsertSnippetResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpsertSnippetRequest struct {
	// The snippet for the site.
	Snippet *Snippet `json:"snippet,omitempty" url:"-"`
}
