// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type SearchCatalogItemsRequest struct {
	// The text filter expression to return items or item variations containing specified text in
	// the `name`, `description`, or `abbreviation` attribute value of an item, or in
	// the `name`, `sku`, or `upc` attribute value of an item variation.
	TextFilter *string `json:"text_filter,omitempty" url:"-"`
	// The category id query expression to return items containing the specified category IDs.
	CategoryIds []string `json:"category_ids,omitempty" url:"-"`
	// The stock-level query expression to return item variations with the specified stock levels.
	// See [SearchCatalogItemsRequestStockLevel](#type-searchcatalogitemsrequeststocklevel) for possible values
	StockLevels []SearchCatalogItemsRequestStockLevel `json:"stock_levels,omitempty" url:"-"`
	// The enabled-location query expression to return items and item variations having specified enabled locations.
	EnabledLocationIds []string `json:"enabled_location_ids,omitempty" url:"-"`
	// The pagination token, returned in the previous response, used to fetch the next batch of pending results.
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// The maximum number of results to return per page. The default value is 100.
	Limit *int `json:"limit,omitempty" url:"-"`
	// The order to sort the results by item names. The default sort order is ascending (`ASC`).
	// See [SortOrder](#type-sortorder) for possible values
	SortOrder *SortOrder `json:"sort_order,omitempty" url:"-"`
	// The product types query expression to return items or item variations having the specified product types.
	ProductTypes []CatalogItemProductType `json:"product_types,omitempty" url:"-"`
	// The customer-attribute filter to return items or item variations matching the specified
	// custom attribute expressions. A maximum number of 10 custom attribute expressions are supported in
	// a single call to the [SearchCatalogItems](api-endpoint:Catalog-SearchCatalogItems) endpoint.
	CustomAttributeFilters []*CustomAttributeFilter `json:"custom_attribute_filters,omitempty" url:"-"`
}

type UpdateItemModifierListsRequest struct {
	// The IDs of the catalog items associated with the CatalogModifierList objects being updated.
	ItemIds []string `json:"item_ids,omitempty" url:"-"`
	// The IDs of the CatalogModifierList objects to enable for the CatalogItem.
	// At least one of `modifier_lists_to_enable` or `modifier_lists_to_disable` must be specified.
	ModifierListsToEnable []string `json:"modifier_lists_to_enable,omitempty" url:"-"`
	// The IDs of the CatalogModifierList objects to disable for the CatalogItem.
	// At least one of `modifier_lists_to_enable` or `modifier_lists_to_disable` must be specified.
	ModifierListsToDisable []string `json:"modifier_lists_to_disable,omitempty" url:"-"`
}

type UpdateItemTaxesRequest struct {
	// IDs for the CatalogItems associated with the CatalogTax objects being updated.
	// No more than 1,000 IDs may be provided.
	ItemIds []string `json:"item_ids,omitempty" url:"-"`
	// IDs of the CatalogTax objects to enable.
	// At least one of `taxes_to_enable` or `taxes_to_disable` must be specified.
	TaxesToEnable []string `json:"taxes_to_enable,omitempty" url:"-"`
	// IDs of the CatalogTax objects to disable.
	// At least one of `taxes_to_enable` or `taxes_to_disable` must be specified.
	TaxesToDisable []string `json:"taxes_to_disable,omitempty" url:"-"`
}

type BatchDeleteCatalogObjectsRequest struct {
	// The IDs of the CatalogObjects to be deleted. When an object is deleted, other objects
	// in the graph that depend on that object will be deleted as well (for example, deleting a
	// CatalogItem will delete its CatalogItemVariation.
	ObjectIds []string `json:"object_ids,omitempty" url:"-"`
}

type BatchGetCatalogObjectsRequest struct {
	// The IDs of the CatalogObjects to be retrieved.
	ObjectIds []string `json:"object_ids,omitempty" url:"-"`
	// If `true`, the response will include additional objects that are related to the
	// requested objects. Related objects are defined as any objects referenced by ID by the results in the `objects` field
	// of the response. These objects are put in the `related_objects` field. Setting this to `true` is
	// helpful when the objects are needed for immediate display to a user.
	// This process only goes one level deep. Objects referenced by the related objects will not be included. For example,
	//
	// if the `objects` field of the response contains a CatalogItem, its associated
	// CatalogCategory objects, CatalogTax objects, CatalogImage objects and
	// CatalogModifierLists will be returned in the `related_objects` field of the
	// response. If the `objects` field of the response contains a CatalogItemVariation,
	// its parent CatalogItem will be returned in the `related_objects` field of
	// the response.
	//
	// Default value: `false`
	IncludeRelatedObjects *bool `json:"include_related_objects,omitempty" url:"-"`
	// The specific version of the catalog objects to be included in the response.
	// This allows you to retrieve historical versions of objects. The specified version value is matched against
	// the [CatalogObject](entity:CatalogObject)s' `version` attribute. If not included, results will
	// be from the current version of the catalog.
	CatalogVersion *int64 `json:"catalog_version,omitempty" url:"-"`
	// Indicates whether to include (`true`) or not (`false`) in the response deleted objects, namely, those with the `is_deleted` attribute set to `true`.
	IncludeDeletedObjects *bool `json:"include_deleted_objects,omitempty" url:"-"`
}

type BatchUpsertCatalogObjectsRequest struct {
	// A value you specify that uniquely identifies this
	// request among all your requests. A common way to create
	// a valid idempotency key is to use a Universally unique
	// identifier (UUID).
	//
	// If you're unsure whether a particular request was successful,
	// you can reattempt it with the same idempotency key without
	// worrying about creating duplicate objects.
	//
	// See [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// A batch of CatalogObjects to be inserted/updated atomically.
	// The objects within a batch will be inserted in an all-or-nothing fashion, i.e., if an error occurs
	// attempting to insert or update an object within a batch, the entire batch will be rejected. However, an error
	// in one batch will not affect other batches within the same request.
	//
	// For each object, its `updated_at` field is ignored and replaced with a current [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), and its
	// `is_deleted` field must not be set to `true`.
	//
	// To modify an existing object, supply its ID. To create a new object, use an ID starting
	// with `#`. These IDs may be used to create relationships between an object and attributes of
	// other objects that reference it. For example, you can create a CatalogItem with
	// ID `#ABC` and a CatalogItemVariation with its `item_id` attribute set to
	// `#ABC` in order to associate the CatalogItemVariation with its parent
	// CatalogItem.
	//
	// Any `#`-prefixed IDs are valid only within a single atomic batch, and will be replaced by server-generated IDs.
	//
	// Each batch may contain up to 1,000 objects. The total number of objects across all batches for a single request
	// may not exceed 10,000. If either of these limits is violated, an error will be returned and no objects will
	// be inserted or updated.
	Batches []*CatalogObjectBatch `json:"batches,omitempty" url:"-"`
}

type CatalogListRequest struct {
	// The pagination cursor returned in the previous response. Leave unset for an initial request.
	// The page size is currently set to be 100.
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// An optional case-insensitive, comma-separated list of object types to retrieve.
	//
	// The valid values are defined in the [CatalogObjectType](entity:CatalogObjectType) enum, for example,
	// `ITEM`, `ITEM_VARIATION`, `CATEGORY`, `DISCOUNT`, `TAX`,
	// `MODIFIER`, `MODIFIER_LIST`, `IMAGE`, etc.
	//
	// If this is unspecified, the operation returns objects of all the top level types at the version
	// of the Square API used to make the request. Object types that are nested onto other object types
	// are not included in the defaults.
	//
	// At the current API version the default object types are:
	// ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
	// PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
	// SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.
	Types *string `json:"-" url:"types,omitempty"`
	// The specific version of the catalog objects to be included in the response.
	// This allows you to retrieve historical
	// versions of objects. The specified version value is matched against
	// the [CatalogObject](entity:CatalogObject)s' `version` attribute. If not included, results will
	// be from the current version of the catalog.
	CatalogVersion *int64 `json:"-" url:"catalog_version,omitempty"`
}

type SearchCatalogObjectsRequest struct {
	// The pagination cursor returned in the previous response. Leave unset for an initial request.
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor *string `json:"cursor,omitempty" url:"-"`
	// The desired set of object types to appear in the search results.
	//
	// If this is unspecified, the operation returns objects of all the top level types at the version
	// of the Square API used to make the request. Object types that are nested onto other object types
	// are not included in the defaults.
	//
	// At the current API version the default object types are:
	// ITEM, CATEGORY, TAX, DISCOUNT, MODIFIER_LIST,
	// PRICING_RULE, PRODUCT_SET, TIME_PERIOD, MEASUREMENT_UNIT,
	// SUBSCRIPTION_PLAN, ITEM_OPTION, CUSTOM_ATTRIBUTE_DEFINITION, QUICK_AMOUNT_SETTINGS.
	ObjectTypes []CatalogObjectType `json:"object_types,omitempty" url:"-"`
	// If `true`, deleted objects will be included in the results. Deleted objects will have their
	// `is_deleted` field set to `true`.
	IncludeDeletedObjects *bool `json:"include_deleted_objects,omitempty" url:"-"`
	// If `true`, the response will include additional objects that are related to the
	// requested objects. Related objects are objects that are referenced by object ID by the objects
	// in the response. This is helpful if the objects are being fetched for immediate display to a user.
	// This process only goes one level deep. Objects referenced by the related objects will not be included.
	// For example:
	//
	// If the `objects` field of the response contains a CatalogItem, its associated
	// CatalogCategory objects, CatalogTax objects, CatalogImage objects and
	// CatalogModifierLists will be returned in the `related_objects` field of the
	// response. If the `objects` field of the response contains a CatalogItemVariation,
	// its parent CatalogItem will be returned in the `related_objects` field of
	// the response.
	//
	// Default value: `false`
	IncludeRelatedObjects *bool `json:"include_related_objects,omitempty" url:"-"`
	// Return objects modified after this [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates), in RFC 3339
	// format, e.g., `2016-09-04T23:59:33.123Z`. The timestamp is exclusive - objects with a
	// timestamp equal to `begin_time` will not be included in the response.
	BeginTime *string `json:"begin_time,omitempty" url:"-"`
	// A query to be used to filter or sort the results. If no query is specified, the entire catalog will be returned.
	Query *CatalogQuery `json:"query,omitempty" url:"-"`
	// A limit on the number of results to be returned in a single page. The limit is advisory -
	// the implementation may return more or fewer results. If the supplied limit is negative, zero, or
	// is higher than the maximum limit of 1,000, it will be ignored.
	Limit *int `json:"limit,omitempty" url:"-"`
}

type BatchDeleteCatalogObjectsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The IDs of all CatalogObjects deleted by this request.
	DeletedObjectIds []string `json:"deleted_object_ids,omitempty" url:"deleted_object_ids,omitempty"`
	// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this deletion in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
	DeletedAt *string `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchDeleteCatalogObjectsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchDeleteCatalogObjectsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchDeleteCatalogObjectsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchDeleteCatalogObjectsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchDeleteCatalogObjectsResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchGetCatalogObjectsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// A list of [CatalogObject](entity:CatalogObject)s returned.
	Objects []*CatalogObject `json:"objects,omitempty" url:"objects,omitempty"`
	// A list of [CatalogObject](entity:CatalogObject)s referenced by the object in the `objects` field.
	RelatedObjects []*CatalogObject `json:"related_objects,omitempty" url:"related_objects,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchGetCatalogObjectsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchGetCatalogObjectsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchGetCatalogObjectsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchGetCatalogObjectsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchGetCatalogObjectsResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchUpsertCatalogObjectsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The created successfully created CatalogObjects.
	Objects []*CatalogObject `json:"objects,omitempty" url:"objects,omitempty"`
	// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., "2016-09-04T23:59:33.123Z".
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The mapping between client and server IDs for this upsert.
	IdMappings []*CatalogIdMapping `json:"id_mappings,omitempty" url:"id_mappings,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchUpsertCatalogObjectsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchUpsertCatalogObjectsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchUpsertCatalogObjectsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchUpsertCatalogObjectsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchUpsertCatalogObjectsResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CatalogInfoResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// Limits that apply to this API.
	Limits *CatalogInfoResponseLimits `json:"limits,omitempty" url:"limits,omitempty"`
	// Names and abbreviations for standard units.
	StandardUnitDescriptionGroup *StandardUnitDescriptionGroup `json:"standard_unit_description_group,omitempty" url:"standard_unit_description_group,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CatalogInfoResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CatalogInfoResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CatalogInfoResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CatalogInfoResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CatalogInfoResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The type of a CatalogItem. Connect V2 only allows the creation of `REGULAR` or `APPOINTMENTS_SERVICE` items.
type CatalogItemProductType string

const (
	CatalogItemProductTypeRegular             CatalogItemProductType = "REGULAR"
	CatalogItemProductTypeGiftCard            CatalogItemProductType = "GIFT_CARD"
	CatalogItemProductTypeAppointmentsService CatalogItemProductType = "APPOINTMENTS_SERVICE"
	CatalogItemProductTypeClassTicket         CatalogItemProductType = "CLASS_TICKET"
)

func NewCatalogItemProductTypeFromString(s string) (CatalogItemProductType, error) {
	switch s {
	case "REGULAR":
		return CatalogItemProductTypeRegular, nil
	case "GIFT_CARD":
		return CatalogItemProductTypeGiftCard, nil
	case "APPOINTMENTS_SERVICE":
		return CatalogItemProductTypeAppointmentsService, nil
	case "CLASS_TICKET":
		return CatalogItemProductTypeClassTicket, nil
	}
	var t CatalogItemProductType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CatalogItemProductType) Ptr() *CatalogItemProductType {
	return &c
}

// A batch of catalog objects.
type CatalogObjectBatch struct {
	// A list of CatalogObjects belonging to this batch.
	Objects []*CatalogObject `json:"objects,omitempty" url:"objects,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CatalogObjectBatch) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CatalogObjectBatch) UnmarshalJSON(data []byte) error {
	type unmarshaler CatalogObjectBatch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CatalogObjectBatch(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CatalogObjectBatch) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Possible types of CatalogObjects returned from the catalog, each
// containing type-specific properties in the `*_data` field corresponding to the specfied object type.
type CatalogObjectType string

const (
	CatalogObjectTypeCatalogObjectTypeDoNotUse CatalogObjectType = "CATALOG_OBJECT_TYPE_DO_NOT_USE"
	CatalogObjectTypeItem                      CatalogObjectType = "ITEM"
	CatalogObjectTypeImage                     CatalogObjectType = "IMAGE"
	CatalogObjectTypeCategory                  CatalogObjectType = "CATEGORY"
	CatalogObjectTypeItemVariation             CatalogObjectType = "ITEM_VARIATION"
	CatalogObjectTypeTax                       CatalogObjectType = "TAX"
	CatalogObjectTypeDiscount                  CatalogObjectType = "DISCOUNT"
	CatalogObjectTypeModifierList              CatalogObjectType = "MODIFIER_LIST"
	CatalogObjectTypeModifier                  CatalogObjectType = "MODIFIER"
	CatalogObjectTypeDiningOption              CatalogObjectType = "DINING_OPTION"
	CatalogObjectTypeTaxExemption              CatalogObjectType = "TAX_EXEMPTION"
	CatalogObjectTypeServiceCharge             CatalogObjectType = "SERVICE_CHARGE"
	CatalogObjectTypePricingRule               CatalogObjectType = "PRICING_RULE"
	CatalogObjectTypeProductSet                CatalogObjectType = "PRODUCT_SET"
	CatalogObjectTypeTimePeriod                CatalogObjectType = "TIME_PERIOD"
	CatalogObjectTypeMeasurementUnit           CatalogObjectType = "MEASUREMENT_UNIT"
	CatalogObjectTypeSubscriptionPlan          CatalogObjectType = "SUBSCRIPTION_PLAN"
	CatalogObjectTypeItemOption                CatalogObjectType = "ITEM_OPTION"
	CatalogObjectTypeItemOptionVal             CatalogObjectType = "ITEM_OPTION_VAL"
	CatalogObjectTypeCustomAttributeDefinition CatalogObjectType = "CUSTOM_ATTRIBUTE_DEFINITION"
	CatalogObjectTypeQuickAmountsSettings      CatalogObjectType = "QUICK_AMOUNTS_SETTINGS"
	CatalogObjectTypeComponent                 CatalogObjectType = "COMPONENT"
	CatalogObjectTypeComposition               CatalogObjectType = "COMPOSITION"
	CatalogObjectTypeResource                  CatalogObjectType = "RESOURCE"
	CatalogObjectTypeCheckoutLink              CatalogObjectType = "CHECKOUT_LINK"
	CatalogObjectTypeAddress                   CatalogObjectType = "ADDRESS"
	CatalogObjectTypeSubscriptionProduct       CatalogObjectType = "SUBSCRIPTION_PRODUCT"
)

func NewCatalogObjectTypeFromString(s string) (CatalogObjectType, error) {
	switch s {
	case "CATALOG_OBJECT_TYPE_DO_NOT_USE":
		return CatalogObjectTypeCatalogObjectTypeDoNotUse, nil
	case "ITEM":
		return CatalogObjectTypeItem, nil
	case "IMAGE":
		return CatalogObjectTypeImage, nil
	case "CATEGORY":
		return CatalogObjectTypeCategory, nil
	case "ITEM_VARIATION":
		return CatalogObjectTypeItemVariation, nil
	case "TAX":
		return CatalogObjectTypeTax, nil
	case "DISCOUNT":
		return CatalogObjectTypeDiscount, nil
	case "MODIFIER_LIST":
		return CatalogObjectTypeModifierList, nil
	case "MODIFIER":
		return CatalogObjectTypeModifier, nil
	case "DINING_OPTION":
		return CatalogObjectTypeDiningOption, nil
	case "TAX_EXEMPTION":
		return CatalogObjectTypeTaxExemption, nil
	case "SERVICE_CHARGE":
		return CatalogObjectTypeServiceCharge, nil
	case "PRICING_RULE":
		return CatalogObjectTypePricingRule, nil
	case "PRODUCT_SET":
		return CatalogObjectTypeProductSet, nil
	case "TIME_PERIOD":
		return CatalogObjectTypeTimePeriod, nil
	case "MEASUREMENT_UNIT":
		return CatalogObjectTypeMeasurementUnit, nil
	case "SUBSCRIPTION_PLAN":
		return CatalogObjectTypeSubscriptionPlan, nil
	case "ITEM_OPTION":
		return CatalogObjectTypeItemOption, nil
	case "ITEM_OPTION_VAL":
		return CatalogObjectTypeItemOptionVal, nil
	case "CUSTOM_ATTRIBUTE_DEFINITION":
		return CatalogObjectTypeCustomAttributeDefinition, nil
	case "QUICK_AMOUNTS_SETTINGS":
		return CatalogObjectTypeQuickAmountsSettings, nil
	case "COMPONENT":
		return CatalogObjectTypeComponent, nil
	case "COMPOSITION":
		return CatalogObjectTypeComposition, nil
	case "RESOURCE":
		return CatalogObjectTypeResource, nil
	case "CHECKOUT_LINK":
		return CatalogObjectTypeCheckoutLink, nil
	case "ADDRESS":
		return CatalogObjectTypeAddress, nil
	case "SUBSCRIPTION_PRODUCT":
		return CatalogObjectTypeSubscriptionProduct, nil
	}
	var t CatalogObjectType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CatalogObjectType) Ptr() *CatalogObjectType {
	return &c
}

// A query composed of one or more different types of filters to narrow the scope of targeted objects when calling the `SearchCatalogObjects` endpoint.
//
// Although a query can have multiple filters, only certain query types can be combined per call to [SearchCatalogObjects](api-endpoint:Catalog-SearchCatalogObjects).
// Any combination of the following types may be used together:
//
//   - [exact_query](entity:CatalogQueryExact)
//   - [prefix_query](entity:CatalogQueryPrefix)
//   - [range_query](entity:CatalogQueryRange)
//   - [sorted_attribute_query](entity:CatalogQuerySortedAttribute)
//   - [text_query](entity:CatalogQueryText)
//     All other query types cannot be combined with any others.
//
// When a query filter is based on an attribute, the attribute must be searchable.
// Searchable attributes are listed as follows, along their parent types that can be searched for with applicable query filters.
//
// - Searchable attribute and objects queryable by searchable attributes \*\*
//
// * `name`: `CatalogItem`, `CatalogItemVariation`, `CatalogCategory`, `CatalogTax`, `CatalogDiscount`, `CatalogModifier`, 'CatalogModifierList`, `CatalogItemOption`, `CatalogItemOptionValue`
// * `description`: `CatalogItem`, `CatalogItemOptionValue`
// * `abbreviation`: `CatalogItem`
// * `upc`: `CatalogItemVariation`
// * `sku`: `CatalogItemVariation`
// * `caption`: `CatalogImage`
// * `display_name`: `CatalogItemOption`
//
// For example, to search for [CatalogItem](entity:CatalogItem) objects by searchable attributes, you can use
// the `"name"`, `"description"`, or `"abbreviation"` attribute in an applicable query filter.
type CatalogQuery struct {
	// A query expression to sort returned query result by the given attribute.
	SortedAttributeQuery *CatalogQuerySortedAttribute `json:"sorted_attribute_query,omitempty" url:"sorted_attribute_query,omitempty"`
	// An exact query expression to return objects with attribute name and value
	// matching the specified attribute name and value exactly. Value matching is case insensitive.
	ExactQuery *CatalogQueryExact `json:"exact_query,omitempty" url:"exact_query,omitempty"`
	// A set query expression to return objects with attribute name and value
	// matching the specified attribute name and any of the specified attribute values exactly.
	// Value matching is case insensitive.
	SetQuery *CatalogQuerySet `json:"set_query,omitempty" url:"set_query,omitempty"`
	// A prefix query expression to return objects with attribute values
	// that have a prefix matching the specified string value. Value matching is case insensitive.
	PrefixQuery *CatalogQueryPrefix `json:"prefix_query,omitempty" url:"prefix_query,omitempty"`
	// A range query expression to return objects with numeric values
	// that lie in the specified range.
	RangeQuery *CatalogQueryRange `json:"range_query,omitempty" url:"range_query,omitempty"`
	// A text query expression to return objects whose searchable attributes contain all of the given
	// keywords, irrespective of their order. For example, if a `CatalogItem` contains custom attribute values of
	// `{"name": "t-shirt"}` and `{"description": "Small, Purple"}`, the query filter of `{"keywords": ["shirt", "sma", "purp"]}`
	// returns this item.
	TextQuery *CatalogQueryText `json:"text_query,omitempty" url:"text_query,omitempty"`
	// A query expression to return items that have any of the specified taxes (as identified by the corresponding `CatalogTax` object IDs) enabled.
	ItemsForTaxQuery *CatalogQueryItemsForTax `json:"items_for_tax_query,omitempty" url:"items_for_tax_query,omitempty"`
	// A query expression to return items that have any of the given modifier list (as identified by the corresponding `CatalogModifierList`s IDs) enabled.
	ItemsForModifierListQuery *CatalogQueryItemsForModifierList `json:"items_for_modifier_list_query,omitempty" url:"items_for_modifier_list_query,omitempty"`
	// A query expression to return items that contains the specified item options (as identified the corresponding `CatalogItemOption` IDs).
	ItemsForItemOptionsQuery *CatalogQueryItemsForItemOptions `json:"items_for_item_options_query,omitempty" url:"items_for_item_options_query,omitempty"`
	// A query expression to return item variations (of the [CatalogItemVariation](entity:CatalogItemVariation) type) that
	// contain all of the specified `CatalogItemOption` IDs.
	ItemVariationsForItemOptionValuesQuery *CatalogQueryItemVariationsForItemOptionValues `json:"item_variations_for_item_option_values_query,omitempty" url:"item_variations_for_item_option_values_query,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CatalogQuery) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CatalogQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler CatalogQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CatalogQuery(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CatalogQuery) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Supported custom attribute query expressions for calling the
// [SearchCatalogItems](api-endpoint:Catalog-SearchCatalogItems)
// endpoint to search for items or item variations.
type CustomAttributeFilter struct {
	// A query expression to filter items or item variations by matching their custom attributes'
	// `custom_attribute_definition_id` property value against the the specified id.
	// Exactly one of `custom_attribute_definition_id` or `key` must be specified.
	CustomAttributeDefinitionId *string `json:"custom_attribute_definition_id,omitempty" url:"custom_attribute_definition_id,omitempty"`
	// A query expression to filter items or item variations by matching their custom attributes'
	// `key` property value against the specified key.
	// Exactly one of `custom_attribute_definition_id` or `key` must be specified.
	Key *string `json:"key,omitempty" url:"key,omitempty"`
	// A query expression to filter items or item variations by matching their custom attributes'
	// `string_value` property value against the specified text.
	// Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.
	StringFilter *string `json:"string_filter,omitempty" url:"string_filter,omitempty"`
	// A query expression to filter items or item variations with their custom attributes
	// containing a number value within the specified range.
	// Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.
	NumberFilter *Range `json:"number_filter,omitempty" url:"number_filter,omitempty"`
	// A query expression to filter items or item variations by matching their custom attributes'
	// `selection_uid_values` values against the specified selection uids.
	// Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.
	SelectionUidsFilter []string `json:"selection_uids_filter,omitempty" url:"selection_uids_filter,omitempty"`
	// A query expression to filter items or item variations by matching their custom attributes'
	// `boolean_value` property values against the specified Boolean expression.
	// Exactly one of `string_filter`, `number_filter`, `selection_uids_filter`, or `bool_filter` must be specified.
	BoolFilter *bool `json:"bool_filter,omitempty" url:"bool_filter,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CustomAttributeFilter) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CustomAttributeFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler CustomAttributeFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CustomAttributeFilter(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CustomAttributeFilter) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ListCatalogResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// The CatalogObjects returned.
	Objects []*CatalogObject `json:"objects,omitempty" url:"objects,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCatalogResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCatalogResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCatalogResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCatalogResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCatalogResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Defines supported stock levels of the item inventory.
type SearchCatalogItemsRequestStockLevel string

const (
	SearchCatalogItemsRequestStockLevelStockLevelDoNotUse SearchCatalogItemsRequestStockLevel = "STOCK_LEVEL_DO_NOT_USE"
	SearchCatalogItemsRequestStockLevelOut                SearchCatalogItemsRequestStockLevel = "OUT"
	SearchCatalogItemsRequestStockLevelLow                SearchCatalogItemsRequestStockLevel = "LOW"
)

func NewSearchCatalogItemsRequestStockLevelFromString(s string) (SearchCatalogItemsRequestStockLevel, error) {
	switch s {
	case "STOCK_LEVEL_DO_NOT_USE":
		return SearchCatalogItemsRequestStockLevelStockLevelDoNotUse, nil
	case "OUT":
		return SearchCatalogItemsRequestStockLevelOut, nil
	case "LOW":
		return SearchCatalogItemsRequestStockLevelLow, nil
	}
	var t SearchCatalogItemsRequestStockLevel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchCatalogItemsRequestStockLevel) Ptr() *SearchCatalogItemsRequestStockLevel {
	return &s
}

// Defines the response body returned from the [SearchCatalogItems](api-endpoint:Catalog-SearchCatalogItems) endpoint.
type SearchCatalogItemsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// Returned items matching the specified query expressions.
	Items []*CatalogObject `json:"items,omitempty" url:"items,omitempty"`
	// Pagination token used in the next request to return more of the search result.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Ids of returned item variations matching the specified query expression.
	MatchedVariationIds []string `json:"matched_variation_ids,omitempty" url:"matched_variation_ids,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchCatalogItemsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchCatalogItemsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchCatalogItemsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchCatalogItemsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchCatalogItemsResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SearchCatalogObjectsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The pagination cursor to be used in a subsequent request. If unset, this is the final response.
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// The CatalogObjects returned.
	Objects []*CatalogObject `json:"objects,omitempty" url:"objects,omitempty"`
	// A list of CatalogObjects referenced by the objects in the `objects` field.
	RelatedObjects []*CatalogObject `json:"related_objects,omitempty" url:"related_objects,omitempty"`
	// When the associated product catalog was last updated. Will
	// match the value for `end_time` or `cursor` if either field is included in the `SearchCatalog` request.
	LatestTime *string `json:"latest_time,omitempty" url:"latest_time,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchCatalogObjectsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchCatalogObjectsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchCatalogObjectsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchCatalogObjectsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchCatalogObjectsResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateItemModifierListsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-date) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateItemModifierListsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateItemModifierListsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateItemModifierListsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateItemModifierListsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateItemModifierListsResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateItemTaxesResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The database [timestamp](https://developer.squareup.com/docs/build-basics/working-with-dates) of this update in RFC 3339 format, e.g., `2016-09-04T23:59:33.123Z`.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateItemTaxesResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateItemTaxesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateItemTaxesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateItemTaxesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateItemTaxesResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
