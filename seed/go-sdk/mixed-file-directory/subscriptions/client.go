// This file was auto-generated by Fern from our API Definition.

package subscriptions

import (
	context "context"
	fmt "fmt"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a subscription to a subscription plan by a customer.
//
// If you provide a card on file in the request, Square charges the card for
// the subscription. Otherwise, Square bills an invoice to the customer's email
// address. The subscription starts immediately, unless the request includes
// the optional `start_date`. Each individual subscription is associated with a particular location.
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateSubscriptionRequest,
	opts ...option.RequestOption,
) (*fern.CreateSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/subscriptions"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches for subscriptions.
//
// Results are ordered chronologically by subscription creation date. If
// the request specifies more than one location ID,
// the endpoint orders the result
// by location ID, and then by creation date within each location. If no locations are given
// in the query, all locations are searched.
//
// You can also optionally specify `customer_ids` to search by customer.
// If left unset, all customers
// associated with the specified locations are returned.
// If the request specifies customer IDs, the endpoint orders results
// first by location, within location by customer ID, and within
// customer by subscription creation date.
//
// For more information, see
// [Retrieve subscriptions](https://developer.squareup.com/docs/subscriptions-api/overview#retrieve-subscriptions).
func (c *Client) Serach(
	ctx context.Context,
	request *fern.SearchSubscriptionsRequest,
	opts ...option.RequestOption,
) (*fern.SearchSubscriptionsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/subscriptions/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SearchSubscriptionsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves a subscription.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the subscription to retrieve.
	subscriptionId string,
	request *fern.SubscriptionsGetRequest,
	opts ...option.RequestOption,
) (*fern.GetSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v", subscriptionId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a subscription. You can set, modify, and clear the
// `subscription` field values.
func (c *Client) Update(
	ctx context.Context,
	// The ID of the subscription to update.
	subscriptionId string,
	request *fern.UpdateSubscriptionRequest,
	opts ...option.RequestOption,
) (*fern.UpdateSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v", subscriptionId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a scheduled action for a subscription.
func (c *Client) DeleteAction(
	ctx context.Context,
	// The ID of the subscription the targeted action is to act upon.
	subscriptionId string,
	// The ID of the targeted action to be deleted.
	actionId string,
	opts ...option.RequestOption,
) (*fern.DeleteSubscriptionActionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v2/subscriptions/%v/actions/%v",
		subscriptionId,
		actionId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.DeleteSubscriptionActionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Schedules a `CANCEL` action to cancel an active subscription
// by setting the `canceled_date` field to the end of the active billing period
// and changing the subscription status from ACTIVE to CANCELED after this date.
func (c *Client) Cancel(
	ctx context.Context,
	// The ID of the subscription to cancel.
	subscriptionId string,
	opts ...option.RequestOption,
) (*fern.CancelSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v/cancel", subscriptionId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CancelSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Lists all events for a specific subscription.
func (c *Client) ListEvents(
	ctx context.Context,
	// The ID of the subscription to retrieve the events for.
	subscriptionId string,
	request *fern.SubscriptionsListEventsRequest,
	opts ...option.RequestOption,
) (*core.Page[*fern.SubscriptionEvent], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v/events", subscriptionId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	prepareCall := func(pageRequest *core.PageRequest[*string]) *core.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &core.CallParams{
			URL:         nextURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    pageRequest.Response,
		}
	}
	readPageResponse := func(response *fern.ListSubscriptionEventsResponse) *core.PageResponse[*string, *fern.SubscriptionEvent] {
		next := response.Cursor
		results := response.SubscriptionEvents
		return &core.PageResponse[*string, *fern.SubscriptionEvent]{
			Next:    next,
			Results: results,
		}
	}
	pager := core.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Schedules a `PAUSE` action to pause an active subscription.
func (c *Client) Pause(
	ctx context.Context,
	// The ID of the subscription to pause.
	subscriptionId string,
	request *fern.PauseSubscriptionRequest,
	opts ...option.RequestOption,
) (*fern.PauseSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v/pause", subscriptionId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.PauseSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Schedules a `RESUME` action to resume a paused or a deactivated subscription.
func (c *Client) Resume(
	ctx context.Context,
	// The ID of the subscription to resume.
	subscriptionId string,
	request *fern.ResumeSubscriptionRequest,
	opts ...option.RequestOption,
) (*fern.ResumeSubscriptionResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v/resume", subscriptionId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.ResumeSubscriptionResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Schedules a `SWAP_PLAN` action to swap a subscription plan in an existing subscription.
func (c *Client) SwapPlan(
	ctx context.Context,
	// The ID of the subscription to swap the subscription plan for.
	subscriptionId string,
	request *fern.SwapPlanRequest,
	opts ...option.RequestOption,
) (*fern.SwapPlanResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/subscriptions/%v/swap-plan", subscriptionId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SwapPlanResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
