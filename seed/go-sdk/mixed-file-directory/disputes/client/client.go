// This file was auto-generated by Fern from our API Definition.

package client

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	evidence "github.com/mixed-file-directory/fern/disputes/evidence"
	option "github.com/mixed-file-directory/fern/option"
	io "io"
	multipart "mime/multipart"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Evidence *evidence.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:   options.ToHeader(),
		Evidence: evidence.NewClient(opts...),
	}
}

// Returns a list of disputes associated with a particular account.
func (c *Client) List(
	ctx context.Context,
	request *fern.DisputesListRequest,
	opts ...option.RequestOption,
) (*core.Page[*fern.Dispute], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/disputes"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	prepareCall := func(pageRequest *core.PageRequest[*string]) *core.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &core.CallParams{
			URL:         nextURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    pageRequest.Response,
		}
	}
	readPageResponse := func(response *fern.ListDisputesResponse) *core.PageResponse[*string, *fern.Dispute] {
		next := response.Cursor
		results := response.Disputes
		return &core.PageResponse[*string, *fern.Dispute]{
			Next:    next,
			Results: results,
		}
	}
	pager := core.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Returns details about a specific dispute.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the dispute you want more details about.
	disputeId string,
	opts ...option.RequestOption,
) (*fern.GetDisputeResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/disputes/%v", disputeId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetDisputeResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Accepts the loss on a dispute. Square returns the disputed amount to the cardholder and
// updates the dispute state to ACCEPTED.
//
// Square debits the disputed amount from the sellerâ€™s Square account. If the Square account
// does not have sufficient funds, Square debits the associated bank account.
func (c *Client) Accept(
	ctx context.Context,
	// The ID of the dispute you want to accept.
	disputeId string,
	opts ...option.RequestOption,
) (*fern.AcceptDisputeResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/disputes/%v/accept", disputeId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.AcceptDisputeResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Uploads a file to use as evidence in a dispute challenge. The endpoint accepts HTTP
// multipart/form-data file uploads in HEIC, HEIF, JPEG, PDF, PNG, and TIFF formats.
func (c *Client) CreateEvidenceFile(
	ctx context.Context,
	// The ID of the dispute for which you want to upload evidence.
	disputeId string,
	imageFile io.Reader,
	request *fern.DisputesCreateEvidenceFileRequest,
	opts ...option.RequestOption,
) (*fern.CreateDisputeEvidenceFileResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/disputes/%v/evidence-files", disputeId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateDisputeEvidenceFileResponse
	requestBuffer := bytes.NewBuffer(nil)
	writer := multipart.NewWriter(requestBuffer)
	if imageFile != nil {
		imageFileFilename := "imageFile_filename"
		if named, ok := imageFile.(interface{ Name() string }); ok {
			imageFileFilename = named.Name()
		}
		imageFilePart, err := writer.CreateFormFile("image_file", imageFileFilename)
		if err != nil {
			return nil, err
		}
		if _, err := io.Copy(imageFilePart, imageFile); err != nil {
			return nil, err
		}
	}
	if request.Request != nil {
		if err := core.WriteMultipartJSON(writer, "request", *request.Request); err != nil {
			return nil, err
		}
	}
	if err := writer.Close(); err != nil {
		return nil, err
	}
	headers.Set("Content-Type", writer.FormDataContentType())

	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     requestBuffer,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Uploads text to use as evidence for a dispute challenge.
func (c *Client) CreateEvidenceText(
	ctx context.Context,
	// The ID of the dispute for which you want to upload evidence.
	disputeId string,
	request *fern.CreateDisputeEvidenceTextRequest,
	opts ...option.RequestOption,
) (*fern.CreateDisputeEvidenceTextResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/disputes/%v/evidence-text", disputeId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateDisputeEvidenceTextResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Submits evidence to the cardholder's bank.
//
// The evidence submitted by this endpoint includes evidence uploaded
// using the [CreateDisputeEvidenceFile](api-endpoint:Disputes-CreateDisputeEvidenceFile) and
// [CreateDisputeEvidenceText](api-endpoint:Disputes-CreateDisputeEvidenceText) endpoints and
// evidence automatically provided by Square, when available. Evidence cannot be removed from
// a dispute after submission.
func (c *Client) SubmitEvidence(
	ctx context.Context,
	// The ID of the dispute for which you want to submit evidence.
	disputeId string,
	opts ...option.RequestOption,
) (*fern.SubmitEvidenceResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/disputes/%v/submit-evidence", disputeId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SubmitEvidenceResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
