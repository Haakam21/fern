// This file was auto-generated by Fern from our API Definition.

package orders

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Creates a new [order](entity:Order) that can include information about products for
// purchase and settings to apply to the purchase.
//
// To pay for a created order, see
// [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
//
// You can modify open orders using the [UpdateOrder](api-endpoint:Orders-UpdateOrder) endpoint.
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateOrderRequest,
	opts ...option.RequestOption,
) (*fern.CreateOrderResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/orders"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateOrderResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves a set of [orders](entity:Order) by their IDs.
//
// If a given order ID does not exist, the ID is ignored instead of generating an error.
func (c *Client) BatchGet(
	ctx context.Context,
	request *fern.BatchGetOrdersRequest,
	opts ...option.RequestOption,
) (*fern.BatchGetOrdersResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/orders/batch-retrieve"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.BatchGetOrdersResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Enables applications to preview order pricing without creating an order.
func (c *Client) Calculate(
	ctx context.Context,
	request *fern.CalculateOrderRequest,
	opts ...option.RequestOption,
) (*fern.CalculateOrderResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/orders/calculate"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CalculateOrderResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates a new order, in the `DRAFT` state, by duplicating an existing order. The newly created order has
// only the core fields (such as line items, taxes, and discounts) copied from the original order.
func (c *Client) Clone(
	ctx context.Context,
	request *fern.CloneOrderRequest,
	opts ...option.RequestOption,
) (*fern.CloneOrderResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/orders/clone"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CloneOrderResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Search all orders for one or more locations. Orders include all sales,
// returns, and exchanges regardless of how or when they entered the Square
// ecosystem (such as Point of Sale, Invoices, and Connect APIs).
//
// `SearchOrders` requests need to specify which locations to search and define a
// [SearchOrdersQuery](entity:SearchOrdersQuery) object that controls
// how to sort or filter the results. Your `SearchOrdersQuery` can:
//
// Set filter criteria.
// Set the sort order.
// Determine whether to return results as complete `Order` objects or as
// [OrderEntry](entity:OrderEntry) objects.
//
// Note that details for orders processed with Square Point of Sale while in
// offline mode might not be transmitted to Square for up to 72 hours. Offline
// orders have a `created_at` value that reflects the time the order was created,
// not the time it was subsequently transmitted to Square.
func (c *Client) Search(
	ctx context.Context,
	request *fern.SearchOrdersRequest,
	opts ...option.RequestOption,
) (*fern.SearchOrdersResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/orders/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SearchOrdersResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves an [Order](entity:Order) by ID.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the order to retrieve.
	orderId string,
	opts ...option.RequestOption,
) (*fern.GetOrderResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/orders/%v", orderId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetOrderResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates an open [order](entity:Order) by adding, replacing, or deleting
// fields. Orders with a `COMPLETED` or `CANCELED` state cannot be updated.
//
// An `UpdateOrder` request requires the following:
//
//   - The `order_id` in the endpoint path, identifying the order to update.
//   - The latest `version` of the order to update.
//   - The [sparse order](https://developer.squareup.com/docs/orders-api/manage-orders/update-orders#sparse-order-objects)
//     containing only the fields to update and the version to which the update is
//     being applied.
//   - If deleting fields, the [dot notation paths](https://developer.squareup.com/docs/orders-api/manage-orders#on-dot-notation)
//     identifying the fields to clear.
//
// To pay for an order, see
// [Pay for Orders](https://developer.squareup.com/docs/orders-api/pay-for-orders).
func (c *Client) Update(
	ctx context.Context,
	// The ID of the order to update.
	orderId string,
	request *fern.UpdateOrderRequest,
	opts ...option.RequestOption,
) (*fern.UpdateOrderResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/orders/%v", orderId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateOrderResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Pay for an [order](entity:Order) using one or more approved [payments](entity:Payment)
// or settle an order with a total of `0`.
//
// The total of the `payment_ids` listed in the request must be equal to the order
// total. Orders with a total amount of `0` can be marked as paid by specifying an empty
// array of `payment_ids` in the request.
//
// To be used with `PayOrder`, a payment must:
//
//   - Reference the order by specifying the `order_id` when [creating the payment](api-endpoint:Payments-CreatePayment).
//     Any approved payments that reference the same `order_id` not specified in the
//     `payment_ids` is canceled.
//   - Be approved with [delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture).
//     Using a delayed capture payment with `PayOrder` completes the approved payment.
func (c *Client) Pay(
	ctx context.Context,
	// The ID of the order being paid.
	orderId string,
	request *fern.PayOrderRequest,
	opts ...option.RequestOption,
) (*fern.PayOrderResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/orders/%v/pay", orderId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.PayOrderResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
