// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type BatchCreateTeamMembersRequest struct {
	// The data used to create the `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
	TeamMembers map[string]*CreateTeamMemberRequest `json:"team_members,omitempty" url:"-"`
}

type BatchUpdateTeamMembersRequest struct {
	// The data used to update the `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
	TeamMembers map[string]*UpdateTeamMemberRequest `json:"team_members,omitempty" url:"-"`
}

type SearchTeamMembersRequest struct {
	// The query parameters.
	Query *SearchTeamMembersQuery `json:"query,omitempty" url:"-"`
	// The maximum number of `TeamMember` objects in a page (100 by default).
	Limit *int `json:"limit,omitempty" url:"-"`
	// The opaque cursor for fetching the next page. For more information, see
	// [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
}

// Represents a response from a bulk create request containing the created `TeamMember` objects or error messages.
type BatchCreateTeamMembersResponse struct {
	// The successfully created `TeamMember` objects. Each key is the `idempotency_key` that maps to the `CreateTeamMemberRequest`.
	TeamMembers map[string]*CreateTeamMemberResponse `json:"team_members,omitempty" url:"team_members,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchCreateTeamMembersResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchCreateTeamMembersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchCreateTeamMembersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchCreateTeamMembersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchCreateTeamMembersResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Represents a response from a bulk update request containing the updated `TeamMember` objects or error messages.
type BatchUpdateTeamMembersResponse struct {
	// The successfully updated `TeamMember` objects. Each key is the `team_member_id` that maps to the `UpdateTeamMemberRequest`.
	TeamMembers map[string]*UpdateTeamMemberResponse `json:"team_members,omitempty" url:"team_members,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BatchUpdateTeamMembersResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchUpdateTeamMembersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchUpdateTeamMembersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchUpdateTeamMembersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchUpdateTeamMembersResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Represents a create request for a `TeamMember` object.
type CreateTeamMemberRequest struct {
	// A unique string that identifies this `CreateTeamMember` request.
	// Keys can be any valid string, but must be unique for every request.
	// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
	//
	// The minimum length is 1 and the maximum length is 45.
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"idempotency_key,omitempty"`
	// **Required** The data which will be used to create the `TeamMember` object.
	TeamMember *TeamMember `json:"team_member,omitempty" url:"team_member,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTeamMemberRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTeamMemberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTeamMemberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTeamMemberRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTeamMemberRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents a response from a create request containing the created `TeamMember` object or error messages.
type CreateTeamMemberResponse struct {
	// The successfully created `TeamMember` object.
	TeamMember *TeamMember `json:"team_member,omitempty" url:"team_member,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateTeamMemberResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateTeamMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateTeamMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateTeamMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateTeamMemberResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Represents a response from a retrieve request containing a `TeamMember` object or error messages.
type GetTeamMemberResponse struct {
	// The successfully retrieved `TeamMember` object.
	TeamMember *TeamMember `json:"team_member,omitempty" url:"team_member,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetTeamMemberResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetTeamMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetTeamMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetTeamMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetTeamMemberResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Represents the parameters in a search for `TeamMember` objects.
type SearchTeamMembersQuery struct {
	// The options to filter by.
	Filter *SearchTeamMembersFilter `json:"filter,omitempty" url:"filter,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchTeamMembersQuery) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchTeamMembersQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchTeamMembersQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchTeamMembersQuery(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchTeamMembersQuery) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Represents a response from a search request containing a filtered list of `TeamMember` objects.
type SearchTeamMembersResponse struct {
	// The filtered list of `TeamMember` objects.
	TeamMembers []*TeamMember `json:"team_members,omitempty" url:"team_members,omitempty"`
	// The opaque cursor for fetching the next page. For more information, see
	// [pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchTeamMembersResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchTeamMembersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchTeamMembersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchTeamMembersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchTeamMembersResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Represents an update request for a `TeamMember` object.
type UpdateTeamMemberRequest struct {
	// The data used to update the `TeamMember` object.
	TeamMember *TeamMember `json:"team_member,omitempty" url:"team_member,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateTeamMemberRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTeamMemberRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTeamMemberRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTeamMemberRequest(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTeamMemberRequest) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

// Represents a response from an update request containing the updated `TeamMember` object or error messages.
type UpdateTeamMemberResponse struct {
	// The successfully updated `TeamMember` object.
	TeamMember *TeamMember `json:"team_member,omitempty" url:"team_member,omitempty"`
	// The errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateTeamMemberResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateTeamMemberResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateTeamMemberResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateTeamMemberResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateTeamMemberResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
