// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type CancelInvoiceRequest struct {
	// The version of the [invoice](entity:Invoice) to cancel.
	// If you do not know the version, you can call
	// [GetInvoice](api-endpoint:Invoices-GetInvoice) or [ListInvoices](api-endpoint:Invoices-ListInvoices).
	Version int `json:"version" url:"-"`
}

type CreateInvoiceRequest struct {
	// The invoice to create.
	Invoice *Invoice `json:"invoice,omitempty" url:"-"`
	// A unique string that identifies the `CreateInvoice` request. If you do not
	// provide `idempotency_key` (or provide an empty string as the value), the endpoint
	// treats each request as independent.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}

type InvoicesDeleteRequest struct {
	// The version of the [invoice](entity:Invoice) to delete.
	// If you do not know the version, you can call [GetInvoice](api-endpoint:Invoices-GetInvoice) or
	// [ListInvoices](api-endpoint:Invoices-ListInvoices).
	Version *int `json:"-" url:"version,omitempty"`
}

type InvoicesListRequest struct {
	// The ID of the location for which to list invoices.
	LocationId string `json:"-" url:"location_id"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// The maximum number of invoices to return (200 is the maximum `limit`).
	// If not provided, the server uses a default limit of 100 invoices.
	Limit *int `json:"-" url:"limit,omitempty"`
}

type PublishInvoiceRequest struct {
	// The version of the [invoice](entity:Invoice) to publish.
	// This must match the current version of the invoice; otherwise, the request is rejected.
	Version int `json:"version" url:"-"`
	// A unique string that identifies the `PublishInvoice` request. If you do not
	// provide `idempotency_key` (or provide an empty string as the value), the endpoint
	// treats each request as independent.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
}

type SearchInvoicesRequest struct {
	// Describes the query criteria for searching invoices.
	Query *InvoiceQuery `json:"query,omitempty" url:"-"`
	// The maximum number of invoices to return (200 is the maximum `limit`).
	// If not provided, the server uses a default limit of 100 invoices.
	Limit *int `json:"limit,omitempty" url:"-"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for your original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
}

// The response returned by the `CancelInvoice` request.
type CancelInvoiceResponse struct {
	// The canceled invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CancelInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CancelInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CancelInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CancelInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CancelInvoiceResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The response returned by the `CreateInvoice` request.
type CreateInvoiceResponse struct {
	// The newly created invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateInvoiceResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Describes a `DeleteInvoice` response.
type DeleteInvoiceResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DeleteInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteInvoiceResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Describes a `GetInvoice` response.
type GetInvoiceResponse struct {
	// The invoice requested.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetInvoiceResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Stores information about an invoice. You use the Invoices API to create and manage
// invoices. For more information, see [Invoices API Overview](https://developer.squareup.com/docs/invoices-api/overview).
type Invoice struct {
	// The Square-assigned ID of the invoice.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The Square-assigned version number, which is incremented each time an update is committed to the invoice.
	Version *int `json:"version,omitempty" url:"version,omitempty"`
	// The ID of the location that this invoice is associated with.
	//
	// If specified in a `CreateInvoice` request, the value must match the `location_id` of the associated order.
	LocationId *string `json:"location_id,omitempty" url:"location_id,omitempty"`
	// The ID of the [order](entity:Order) for which the invoice is created.
	// This field is required when creating an invoice, and the order must be in the `OPEN` state.
	//
	// To view the line items and other information for the associated order, call the
	// [RetrieveOrder](api-endpoint:Orders-RetrieveOrder) endpoint using the order ID.
	OrderId *string `json:"order_id,omitempty" url:"order_id,omitempty"`
	// The customer who receives the invoice. This customer data is displayed on the invoice and used by Square to deliver the invoice.
	//
	// This field is required to publish an invoice, and it must specify the `customer_id`.
	PrimaryRecipient *InvoiceRecipient `json:"primary_recipient,omitempty" url:"primary_recipient,omitempty"`
	// The payment schedule for the invoice, represented by one or more payment requests that
	// define payment settings, such as amount due and due date. An invoice supports the following payment request combinations:
	//
	// - One balance
	// - One deposit with one balance
	// - 2–12 installments
	// - One deposit with 2–12 installments
	//
	// This field is required when creating an invoice. It must contain at least one payment request.
	// All payment requests for the invoice must equal the total order amount. For more information, see
	// [Configuring payment requests](https://developer.squareup.com/docs/invoices-api/create-publish-invoices#payment-requests).
	//
	// Adding `INSTALLMENT` payment requests to an invoice requires an
	// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	PaymentRequests []*InvoicePaymentRequest `json:"payment_requests,omitempty" url:"payment_requests,omitempty"`
	// The delivery method that Square uses to send the invoice, reminders, and receipts to
	// the customer. After the invoice is published, Square processes the invoice based on the delivery
	// method and payment request settings, either immediately or on the `scheduled_at` date, if specified.
	// For example, Square might send the invoice or receipt for an automatic payment. For invoices with
	// automatic payments, this field must be set to `EMAIL`.
	//
	// One of the following is required when creating an invoice:
	//
	//   - (Recommended) This `delivery_method` field. To configure an automatic payment, the
	//     `automatic_payment_source` field of the payment request is also required.
	//   - The deprecated `request_method` field of the payment request. Note that `invoice`
	//     objects returned in responses do not include `request_method`.
	//     See [InvoiceDeliveryMethod](#type-invoicedeliverymethod) for possible values
	DeliveryMethod *InvoiceDeliveryMethod `json:"delivery_method,omitempty" url:"delivery_method,omitempty"`
	// A user-friendly invoice number that is displayed on the invoice. The value is unique within a location.
	// If not provided when creating an invoice, Square assigns a value.
	// It increments from 1 and is padded with zeros making it 7 characters long
	// (for example, 0000001 and 0000002).
	InvoiceNumber *string `json:"invoice_number,omitempty" url:"invoice_number,omitempty"`
	// The title of the invoice, which is displayed on the invoice.
	Title *string `json:"title,omitempty" url:"title,omitempty"`
	// The description of the invoice, which is displayed on the invoice.
	Description *string `json:"description,omitempty" url:"description,omitempty"`
	// The timestamp when the invoice is scheduled for processing, in RFC 3339 format.
	// After the invoice is published, Square processes the invoice on the specified date,
	// according to the delivery method and payment request settings.
	//
	// If the field is not set, Square processes the invoice immediately after it is published.
	ScheduledAt *string `json:"scheduled_at,omitempty" url:"scheduled_at,omitempty"`
	// The URL of the Square-hosted invoice page.
	// After you publish the invoice using the `PublishInvoice` endpoint, Square hosts the invoice
	// page and returns the page URL in the response.
	PublicUrl *string `json:"public_url,omitempty" url:"public_url,omitempty"`
	// The current amount due for the invoice. In addition to the
	// amount due on the next payment request, this includes any overdue payment amounts.
	NextPaymentAmountMoney *Money `json:"next_payment_amount_money,omitempty" url:"next_payment_amount_money,omitempty"`
	// The status of the invoice.
	// See [InvoiceStatus](#type-invoicestatus) for possible values
	Status *InvoiceStatus `json:"status,omitempty" url:"status,omitempty"`
	// The time zone used to interpret calendar dates on the invoice, such as `due_date`.
	// When an invoice is created, this field is set to the `timezone` specified for the seller
	// location. The value cannot be changed.
	//
	// For example, a payment `due_date` of 2021-03-09 with a `timezone` of America/Los_Angeles
	// becomes overdue at midnight on March 9 in America/Los_Angeles (which equals a UTC timestamp
	// of 2021-03-10T08:00:00Z).
	Timezone *string `json:"timezone,omitempty" url:"timezone,omitempty"`
	// The timestamp when the invoice was created, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp when the invoice was last updated, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The payment methods that customers can use to pay the invoice on the Square-hosted
	// invoice page. This setting is independent of any automatic payment requests for the invoice.
	//
	// This field is required when creating an invoice and must set at least one payment method to `true`.
	AcceptedPaymentMethods *InvoiceAcceptedPaymentMethods `json:"accepted_payment_methods,omitempty" url:"accepted_payment_methods,omitempty"`
	// Additional seller-defined fields that are displayed on the invoice. For more information, see
	// [Custom fields](https://developer.squareup.com/docs/invoices-api/overview#custom-fields).
	//
	// Adding custom fields to an invoice requires an
	// [Invoices Plus subscription](https://developer.squareup.com/docs/invoices-api/overview#invoices-plus-subscription).
	//
	// Max: 2 custom fields
	CustomFields []*InvoiceCustomField `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`
	// The ID of the [subscription](entity:Subscription) associated with the invoice.
	// This field is present only on subscription billing invoices.
	SubscriptionId *string `json:"subscription_id,omitempty" url:"subscription_id,omitempty"`
	// The date of the sale or the date that the service is rendered, in `YYYY-MM-DD` format.
	// This field can be used to specify a past or future date which is displayed on the invoice.
	SaleOrServiceDate *string `json:"sale_or_service_date,omitempty" url:"sale_or_service_date,omitempty"`
	// **France only.** The payment terms and conditions that are displayed on the invoice. For more information,
	// see [Payment conditions](https://developer.squareup.com/docs/invoices-api/overview#payment-conditions).
	//
	// For countries other than France, Square returns an `INVALID_REQUEST_ERROR` with a `BAD_REQUEST` code and
	// "Payment conditions are not supported for this location's country" detail if this field is included in `CreateInvoice` or `UpdateInvoice` requests.
	PaymentConditions *string `json:"payment_conditions,omitempty" url:"payment_conditions,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *Invoice) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Invoice) UnmarshalJSON(data []byte) error {
	type unmarshaler Invoice
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Invoice(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *Invoice) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Describes query criteria for searching invoices.
type InvoiceQuery struct {
	// Query filters to apply in searching invoices.
	// For more information, see [Search for invoices](https://developer.squareup.com/docs/invoices-api/retrieve-list-search-invoices#search-invoices).
	Filter *InvoiceFilter `json:"filter,omitempty" url:"filter,omitempty"`
	// Describes the sort order for the search result.
	Sort *InvoiceSort `json:"sort,omitempty" url:"sort,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *InvoiceQuery) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *InvoiceQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler InvoiceQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = InvoiceQuery(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *InvoiceQuery) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Describes a `ListInvoice` response.
type ListInvoicesResponse struct {
	// The invoices retrieved.
	Invoices []*Invoice `json:"invoices,omitempty" url:"invoices,omitempty"`
	// When a response is truncated, it includes a cursor that you can use in a
	// subsequent request to retrieve the next set of invoices. If empty, this is the final
	// response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListInvoicesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListInvoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListInvoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListInvoicesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListInvoicesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Describes a `PublishInvoice` response.
type PublishInvoiceResponse struct {
	// The published invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PublishInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PublishInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PublishInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PublishInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PublishInvoiceResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Describes a `SearchInvoices` response.
type SearchInvoicesResponse struct {
	// The list of invoices returned by the search.
	Invoices []*Invoice `json:"invoices,omitempty" url:"invoices,omitempty"`
	// When a response is truncated, it includes a cursor that you can use in a
	// subsequent request to fetch the next set of invoices. If empty, this is the final
	// response.
	// For more information, see [Pagination](https://developer.squareup.com/docs/working-with-apis/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchInvoicesResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchInvoicesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchInvoicesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchInvoicesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchInvoicesResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Describes a `UpdateInvoice` response.
type UpdateInvoiceResponse struct {
	// The updated invoice.
	Invoice *Invoice `json:"invoice,omitempty" url:"invoice,omitempty"`
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateInvoiceResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateInvoiceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateInvoiceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateInvoiceResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateInvoiceResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateInvoiceRequest struct {
	// The invoice fields to update.
	// The current invoice version must be specified in the `version` field. For more information,
	// see [Update an Invoice](https://developer.squareup.com/docs/invoices-api/update-invoices).
	Invoice *Invoice `json:"invoice,omitempty" url:"-"`
	// A unique string that identifies the `UpdateInvoice` request. If you do not
	// provide `idempotency_key` (or provide an empty string as the value), the endpoint
	// treats each request as independent.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey *string `json:"idempotency_key,omitempty" url:"-"`
	// The list of fields to clear.
	// For examples, see [Update an Invoice](https://developer.squareup.com/docs/invoices-api/update-invoices).
	FieldsToClear []string `json:"fields_to_clear,omitempty" url:"-"`
}
