// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type EmployeesListRequest struct {
	LocationId *string `json:"-" url:"location_id,omitempty"`
	// Specifies the EmployeeStatus to filter the employee by.
	Status *EmployeeStatus `json:"-" url:"status,omitempty"`
	// The number of employees to be returned on each page.
	Limit *int `json:"-" url:"limit,omitempty"`
	// The token required to retrieve the specified page of results.
	Cursor *string `json:"-" url:"cursor,omitempty"`
}

// The status of the Employee being retrieved.
type EmployeeStatus string

const (
	EmployeeStatusDoNotUse EmployeeStatus = "DO_NOT_USE"
	EmployeeStatusActive   EmployeeStatus = "ACTIVE"
	EmployeeStatusInactive EmployeeStatus = "INACTIVE"
)

func NewEmployeeStatusFromString(s string) (EmployeeStatus, error) {
	switch s {
	case "DO_NOT_USE":
		return EmployeeStatusDoNotUse, nil
	case "ACTIVE":
		return EmployeeStatusActive, nil
	case "INACTIVE":
		return EmployeeStatusInactive, nil
	}
	var t EmployeeStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EmployeeStatus) Ptr() *EmployeeStatus {
	return &e
}

type GetEmployeeResponse struct {
	Employee *Employee `json:"employee,omitempty" url:"employee,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetEmployeeResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEmployeeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEmployeeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEmployeeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEmployeeResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListEmployeesResponse struct {
	Employees []*Employee `json:"employees,omitempty" url:"employees,omitempty"`
	// The token to be used to retrieve the next page of results.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListEmployeesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListEmployeesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListEmployeesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListEmployeesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListEmployeesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
