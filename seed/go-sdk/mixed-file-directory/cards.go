// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type CreateCardRequest struct {
	// A unique string that identifies this CreateCard request. Keys can be
	// any valid string and must be unique for every request.
	//
	// Max: 45 characters
	//
	// See [Idempotency keys](https://developer.squareup.com/docs/basics/api101/idempotency) for more information.
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The ID of the source which represents the card information to be stored. This can be a card nonce or a payment id.
	SourceId string `json:"source_id" url:"-"`
	// An identifying token generated by [Payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
	// Verification tokens encapsulate customer device information and 3-D Secure
	// challenge results to indicate that Square has verified the buyer identity.
	//
	// See the [SCA Overview](https://developer.squareup.com/docs/sca-overview).
	VerificationToken *string `json:"verification_token,omitempty" url:"-"`
	// Payment details associated with the card to be stored.
	Card *Card `json:"card,omitempty" url:"-"`
}

type DisableCardRequest struct {
}

type CardsListRequest struct {
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this to retrieve the next set of results for your original query.
	//
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Limit results to cards associated with the customer supplied.
	// By default, all cards owned by the merchant are returned.
	CustomerId *string `json:"-" url:"customer_id,omitempty"`
	// Includes disabled cards.
	// By default, all enabled cards owned by the merchant are returned.
	IncludeDisabled *bool `json:"-" url:"include_disabled,omitempty"`
	// Limit results to cards associated with the reference_id supplied.
	ReferenceId *string `json:"-" url:"reference_id,omitempty"`
	// Sorts the returned list by when the card was created with the specified order.
	// This field defaults to ASC.
	SortOrder *SortOrder `json:"-" url:"sort_order,omitempty"`
}

// Represents the payment details of a card to be used for payments. These
// details are determined by the payment token generated by Web Payments SDK.
type Card struct {
	// Unique ID for this card. Generated by Square.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The card's brand.
	// See [CardBrand](#type-cardbrand) for possible values
	CardBrand *CardBrand `json:"card_brand,omitempty" url:"card_brand,omitempty"`
	// The last 4 digits of the card number.
	Last4 *string `json:"last_4,omitempty" url:"last_4,omitempty"`
	// The expiration month of the associated card as an integer between 1 and 12.
	ExpMonth *int64 `json:"exp_month,omitempty" url:"exp_month,omitempty"`
	// The four-digit year of the card's expiration date.
	ExpYear *int64 `json:"exp_year,omitempty" url:"exp_year,omitempty"`
	// The name of the cardholder.
	CardholderName *string `json:"cardholder_name,omitempty" url:"cardholder_name,omitempty"`
	// The billing address for this card.
	BillingAddress *Address `json:"billing_address,omitempty" url:"billing_address,omitempty"`
	// Intended as a Square-assigned identifier, based
	// on the card number, to identify the card across multiple locations within a
	// single application.
	Fingerprint *string `json:"fingerprint,omitempty" url:"fingerprint,omitempty"`
	// **Required** The ID of a customer created using the Customers API to be associated with the card.
	CustomerId *string `json:"customer_id,omitempty" url:"customer_id,omitempty"`
	// The ID of the merchant associated with the card.
	MerchantId *string `json:"merchant_id,omitempty" url:"merchant_id,omitempty"`
	// An optional user-defined reference ID that associates this card with
	// another entity in an external system. For example, a customer ID from an
	// external customer management system.
	ReferenceId *string `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	// Indicates whether or not a card can be used for payments.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// The type of the card.
	// The Card object includes this field only in response to Payments API calls.
	// See [CardType](#type-cardtype) for possible values
	CardType *CardType `json:"card_type,omitempty" url:"card_type,omitempty"`
	// Indicates whether the Card is prepaid or not.
	// The Card object includes this field only in response to Payments API calls.
	// See [CardPrepaidType](#type-cardprepaidtype) for possible values
	PrepaidType *CardPrepaidType `json:"prepaid_type,omitempty" url:"prepaid_type,omitempty"`
	// The first six digits of the card number, known as the Bank Identification Number (BIN). Only the Payments API
	// returns this field.
	Bin *string `json:"bin,omitempty" url:"bin,omitempty"`
	// Current version number of the card. Increments with each card update. Requests to update an
	// existing Card object will be rejected unless the version in the request matches the current
	// version for the Card.
	Version *int64 `json:"version,omitempty" url:"version,omitempty"`
	// The card's co-brand if available. For example, an Afterpay virtual card would have a
	// co-brand of AFTERPAY.
	// See [CardCoBrand](#type-cardcobrand) for possible values
	CardCoBrand *CardCoBrand `json:"card_co_brand,omitempty" url:"card_co_brand,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *Card) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Card) UnmarshalJSON(data []byte) error {
	type unmarshaler Card
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Card(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Card) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that are included in the response body of
// a request to the [CreateCard](api-endpoint:Cards-CreateCard) endpoint.
//
// Note: if there are errors processing the request, the card field will not be
// present.
type CreateCardResponse struct {
	// Information on errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The newly created card.
	Card *Card `json:"card,omitempty" url:"card,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateCardResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateCardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateCardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateCardResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateCardResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the fields that are included in the response body of
// a request to the [DisableCard](api-endpoint:Cards-DisableCard) endpoint.
//
// Note: if there are errors processing the request, the card field will not be
// present.
type DisableCardResponse struct {
	// Information on errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The retrieved card.
	Card *Card `json:"card,omitempty" url:"card,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DisableCardResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DisableCardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DisableCardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DisableCardResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DisableCardResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Defines the fields that are included in the response body of
// a request to the [RetrieveCard](api-endpoint:Cards-RetrieveCard) endpoint.
//
// Note: if there are errors processing the request, the card field will not be
// present.
type GetCardResponse struct {
	// Information on errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The retrieved card.
	Card *Card `json:"card,omitempty" url:"card,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetCardResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetCardResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetCardResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetCardResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetCardResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Defines the fields that are included in the response body of
// a request to the [ListCards](api-endpoint:Cards-ListCards) endpoint.
//
// Note: if there are errors processing the request, the card field will not be
// present.
type ListCardsResponse struct {
	// Information on errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested list of `Card`s.
	Cards []*Card `json:"cards,omitempty" url:"cards,omitempty"`
	// The pagination cursor to be used in a subsequent request. If empty,
	// this is the final response.
	//
	// See [Pagination](https://developer.squareup.com/docs/basics/api101/pagination) for more information.
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListCardsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListCardsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListCardsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListCardsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListCardsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
