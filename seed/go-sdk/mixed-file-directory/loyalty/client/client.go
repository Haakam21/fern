// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	accounts "github.com/mixed-file-directory/fern/loyalty/accounts"
	programsclient "github.com/mixed-file-directory/fern/loyalty/programs/client"
	rewards "github.com/mixed-file-directory/fern/loyalty/rewards"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Accounts *accounts.Client
	Programs *programsclient.Client
	Rewards  *rewards.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:   options.ToHeader(),
		Accounts: accounts.NewClient(opts...),
		Programs: programsclient.NewClient(opts...),
		Rewards:  rewards.NewClient(opts...),
	}
}

// Searches for loyalty events.
//
// A Square loyalty program maintains a ledger of events that occur during the lifetime of a
// buyer's loyalty account. Each change in the point balance
// (for example, points earned, points redeemed, and points expired) is
// recorded in the ledger. Using this endpoint, you can search the ledger for events.
//
// Search results are sorted by `created_at` in descending order.
func (c *Client) SearchEvents(
	ctx context.Context,
	request *fern.SearchLoyaltyEventsRequest,
	opts ...option.RequestOption,
) (*fern.SearchLoyaltyEventsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/loyalty/events/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SearchLoyaltyEventsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
