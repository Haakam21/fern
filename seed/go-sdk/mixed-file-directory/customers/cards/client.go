// This file was auto-generated by Fern from our API Definition.

package cards

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	customers "github.com/mixed-file-directory/fern/customers"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Adds a card on file to an existing customer.
//
// As with charges, calls to `CreateCustomerCard` are idempotent. Multiple
// calls with the same card nonce return the same card record that was created
// with the provided nonce during the _first_ call.
func (c *Client) Create(
	ctx context.Context,
	// The Square ID of the customer profile the card is linked to.
	customerId string,
	request *customers.CreateCustomerCardRequest,
	opts ...option.RequestOption,
) (*fern.CreateCustomerCardResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/%v/cards", customerId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateCustomerCardResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Removes a card on file from a customer.
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the customer that the card on file belongs to.
	customerId string,
	// The ID of the card on file to delete.
	cardId string,
	opts ...option.RequestOption,
) (*fern.DeleteCustomerCardResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v2/customers/%v/cards/%v",
		customerId,
		cardId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.DeleteCustomerCardResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
