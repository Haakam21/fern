// This file was auto-generated by Fern from our API Definition.

package groups

import (
	context "context"
	fmt "fmt"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	customers "github.com/mixed-file-directory/fern/customers"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Retrieves the list of customer groups of a business.
func (c *Client) List(
	ctx context.Context,
	request *customers.GroupsListRequest,
	opts ...option.RequestOption,
) (*core.Page[*fern.CustomerGroup], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/customers/groups"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	prepareCall := func(pageRequest *core.PageRequest[*string]) *core.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &core.CallParams{
			URL:         nextURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    pageRequest.Response,
		}
	}
	readPageResponse := func(response *fern.ListCustomerGroupsResponse) *core.PageResponse[*string, *fern.CustomerGroup] {
		next := response.Cursor
		results := response.Groups
		return &core.PageResponse[*string, *fern.CustomerGroup]{
			Next:    next,
			Results: results,
		}
	}
	pager := core.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a new customer group for a business.
//
// The request must include the `name` value of the group.
func (c *Client) Create(
	ctx context.Context,
	request *customers.CreateCustomerGroupRequest,
	opts ...option.RequestOption,
) (*fern.CreateCustomerGroupResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/customers/groups"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateCustomerGroupResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieves a specific customer group as identified by the `group_id` value.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the customer group to retrieve.
	groupId string,
	opts ...option.RequestOption,
) (*fern.GetCustomerGroupResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/groups/%v", groupId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetCustomerGroupResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a customer group as identified by the `group_id` value.
func (c *Client) Update(
	ctx context.Context,
	// The ID of the customer group to update.
	groupId string,
	request *customers.UpdateCustomerGroupRequest,
	opts ...option.RequestOption,
) (*fern.UpdateCustomerGroupResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/groups/%v", groupId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateCustomerGroupResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a customer group as identified by the `group_id` value.
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the customer group to delete.
	groupId string,
	opts ...option.RequestOption,
) (*fern.DeleteCustomerGroupResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/groups/%v", groupId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.DeleteCustomerGroupResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Adds a group membership to a customer.
//
// The customer is identified by the `customer_id` value
// and the customer group is identified by the `group_id` value.
func (c *Client) Add(
	ctx context.Context,
	// The ID of the customer to add to a group.
	customerId string,
	// The ID of the customer group to add the customer to.
	groupId string,
	opts ...option.RequestOption,
) (*fern.AddGroupToCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v2/customers/%v/groups/%v",
		customerId,
		groupId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.AddGroupToCustomerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Removes a group membership from a customer.
//
// The customer is identified by the `customer_id` value
// and the customer group is identified by the `group_id` value.
func (c *Client) Remove(
	ctx context.Context,
	// The ID of the customer to remove from the group.
	customerId string,
	// The ID of the customer group to remove the customer from.
	groupId string,
	opts ...option.RequestOption,
) (*fern.RemoveGroupFromCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(
		baseURL+"/v2/customers/%v/groups/%v",
		customerId,
		groupId,
	)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.RemoveGroupFromCustomerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
