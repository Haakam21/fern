// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fmt "fmt"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	cards "github.com/mixed-file-directory/fern/customers/cards"
	customattributes "github.com/mixed-file-directory/fern/customers/customattributes"
	groups "github.com/mixed-file-directory/fern/customers/groups"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Cards            *cards.Client
	CustomAttributes *customattributes.Client
	Groups           *groups.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:           options.ToHeader(),
		Cards:            cards.NewClient(opts...),
		CustomAttributes: customattributes.NewClient(opts...),
		Groups:           groups.NewClient(opts...),
	}
}

// Lists customer profiles associated with a Square account.
//
// Under normal operating conditions, newly created or updated customer profiles become available
// for the listing operation in well under 30 seconds. Occasionally, propagation of the new or updated
// profiles can take closer to one minute or longer, especially during network incidents and outages.
func (c *Client) List(
	ctx context.Context,
	request *fern.CustomersListRequest,
	opts ...option.RequestOption,
) (*core.Page[*fern.Customer], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/customers"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	prepareCall := func(pageRequest *core.PageRequest[*string]) *core.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &core.CallParams{
			URL:         nextURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    pageRequest.Response,
		}
	}
	readPageResponse := func(response *fern.ListCustomersResponse) *core.PageResponse[*string, *fern.Customer] {
		next := response.Cursor
		results := response.Customers
		return &core.PageResponse[*string, *fern.Customer]{
			Next:    next,
			Results: results,
		}
	}
	pager := core.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a new customer for a business.
//
// You must provide at least one of the following values in your request to this
// endpoint:
//
// - `given_name`
// - `family_name`
// - `company_name`
// - `email_address`
// - `phone_number`
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateCustomerRequest,
	opts ...option.RequestOption,
) (*fern.CreateCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/customers"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateCustomerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Creates or updates [custom attributes](entity:CustomAttribute) for customer profiles as a bulk operation.
//
// Use this endpoint to set the value of one or more custom attributes for one or more customer profiles.
// A custom attribute is based on a custom attribute definition in a Square seller account, which is
// created using the [CreateCustomerCustomAttributeDefinition](api-endpoint:CustomerCustomAttributes-CreateCustomerCustomAttributeDefinition) endpoint.
//
// This `BulkUpsertCustomerCustomAttributes` endpoint accepts a map of 1 to 25 individual upsert
// requests and returns a map of individual upsert responses. Each upsert request has a unique ID
// and provides a customer ID and custom attribute. Each upsert response is returned with the ID
// of the corresponding request.
//
// To create or update a custom attribute owned by another application, the `visibility` setting
// must be `VISIBILITY_READ_WRITE_VALUES`. Note that seller-defined custom attributes
// (also known as custom fields) are always set to `VISIBILITY_READ_WRITE_VALUES`.
func (c *Client) BatchUpsertAttributes(
	ctx context.Context,
	request *fern.BatchUpsertCustomerCustomAttributesRequest,
	opts ...option.RequestOption,
) (*fern.BatchUpsertCustomerCustomAttributesResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/customers/custom-attributes/bulk-upsert"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.BatchUpsertCustomerCustomAttributesResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Searches the customer profiles associated with a Square account using one or more supported query filters.
//
// Calling `SearchCustomers` without any explicit query filter returns all
// customer profiles ordered alphabetically based on `given_name` and
// `family_name`.
//
// Under normal operating conditions, newly created or updated customer profiles become available
// for the search operation in well under 30 seconds. Occasionally, propagation of the new or updated
// profiles can take closer to one minute or longer, especially during network incidents and outages.
func (c *Client) Serach(
	ctx context.Context,
	request *fern.SearchCustomersRequest,
	opts ...option.RequestOption,
) (*fern.SearchCustomersResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/customers/search"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.SearchCustomersResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Returns details for a single customer.
func (c *Client) Get(
	ctx context.Context,
	// The ID of the customer to retrieve.
	customerId string,
	opts ...option.RequestOption,
) (*fern.GetCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/%v", customerId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.GetCustomerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Updates a customer profile. To change an attribute, specify the new value. To remove an attribute, specify the value as an empty string or empty object.
//
// As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
//
// To update a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
//
// You cannot use this endpoint to change cards on file. To make changes, use the [Cards API](api:Cards) or [Gift Cards API](api:GiftCards).
func (c *Client) Update(
	ctx context.Context,
	// The ID of the customer to update.
	customerId string,
	request *fern.UpdateCustomerRequest,
	opts ...option.RequestOption,
) (*fern.UpdateCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/%v", customerId)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.UpdateCustomerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPut,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Deletes a customer profile from a business. This operation also unlinks any associated cards on file.
//
// As a best practice, you should include the `version` field in the request to enable [optimistic concurrency](https://developer.squareup.com/docs/working-with-apis/optimistic-concurrency) control. The value must be set to the current version of the customer profile.
//
// To delete a customer profile that was created by merging existing profiles, you must use the ID of the newly created profile.
func (c *Client) Delete(
	ctx context.Context,
	// The ID of the customer to delete.
	customerId string,
	request *fern.CustomersDeleteRequest,
	opts ...option.RequestOption,
) (*fern.DeleteCustomerResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v2/customers/%v", customerId)

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.DeleteCustomerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodDelete,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
