// This file was auto-generated by Fern from our API Definition.

package mobile

import (
	context "context"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Generates code to authorize a mobile application to connect to a Square card reader.
//
// Authorization codes are one-time-use codes and expire 60 minutes after being issued.
//
// **Important:** The `Authorization` header you provide to this endpoint must have the following format:
//
// ```
// Authorization: Bearer ACCESS_TOKEN
// ```
//
// Replace `ACCESS_TOKEN` with a
// [valid production authorization credential](https://developer.squareup.com/docs/build-basics/access-tokens).
func (c *Client) AuthorizationCode(
	ctx context.Context,
	request *fern.CreateMobileAuthorizationCodeRequest,
	opts ...option.RequestOption,
) (*fern.CreateMobileAuthorizationCodeResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/mobile/authorization-code"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateMobileAuthorizationCodeResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
