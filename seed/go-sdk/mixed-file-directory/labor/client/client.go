// This file was auto-generated by Fern from our API Definition.

package client

import (
	context "context"
	fmt "fmt"
	fern "github.com/mixed-file-directory/fern"
	core "github.com/mixed-file-directory/fern/core"
	breaktypes "github.com/mixed-file-directory/fern/labor/breaktypes"
	employeewages "github.com/mixed-file-directory/fern/labor/employeewages"
	shifts "github.com/mixed-file-directory/fern/labor/shifts"
	teammemberwages "github.com/mixed-file-directory/fern/labor/teammemberwages"
	workweekconfigs "github.com/mixed-file-directory/fern/labor/workweekconfigs"
	option "github.com/mixed-file-directory/fern/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	BreakTypes      *breaktypes.Client
	EmployeeWages   *employeewages.Client
	Shifts          *shifts.Client
	TeamMemberWages *teammemberwages.Client
	WorkweekConfigs *workweekconfigs.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:          options.ToHeader(),
		BreakTypes:      breaktypes.NewClient(opts...),
		EmployeeWages:   employeewages.NewClient(opts...),
		Shifts:          shifts.NewClient(opts...),
		TeamMemberWages: teammemberwages.NewClient(opts...),
		WorkweekConfigs: workweekconfigs.NewClient(opts...),
	}
}

// Returns a paginated list of `BreakType` instances for a business.
func (c *Client) List(
	ctx context.Context,
	request *fern.LaborListRequest,
	opts ...option.RequestOption,
) (*core.Page[*fern.BreakType], error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/labor/break-types"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	prepareCall := func(pageRequest *core.PageRequest[*string]) *core.CallParams {
		if pageRequest.Cursor != nil {
			queryParams.Set("cursor", fmt.Sprintf("%v", *pageRequest.Cursor))
		}
		nextURL := endpointURL
		if len(queryParams) > 0 {
			nextURL += "?" + queryParams.Encode()
		}
		return &core.CallParams{
			URL:         nextURL,
			Method:      http.MethodGet,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Response:    pageRequest.Response,
		}
	}
	readPageResponse := func(response *fern.ListBreakTypesResponse) *core.PageResponse[*string, *fern.BreakType] {
		next := response.Cursor
		results := response.BreakTypes
		return &core.PageResponse[*string, *fern.BreakType]{
			Next:    next,
			Results: results,
		}
	}
	pager := core.NewCursorPager(
		c.caller,
		prepareCall,
		readPageResponse,
	)
	return pager.GetPage(ctx, request.Cursor)
}

// Creates a new `BreakType`.
//
// A `BreakType` is a template for creating `Break` objects.
// You must provide the following values in your request to this
// endpoint:
//
// - `location_id`
// - `break_name`
// - `expected_duration`
// - `is_paid`
//
// You can only have three `BreakType` instances per location. If you attempt to add a fourth
// `BreakType` for a location, an `INVALID_REQUEST_ERROR` "Exceeded limit of 3 breaks per location."
// is returned.
func (c *Client) Create(
	ctx context.Context,
	request *fern.CreateBreakTypeRequest,
	opts ...option.RequestOption,
) (*fern.CreateBreakTypeResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://connect.squareupsandbox.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v2/labor/break-types"

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *fern.CreateBreakTypeResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:         endpointURL,
			Method:      http.MethodPost,
			MaxAttempts: options.MaxAttempts,
			Headers:     headers,
			Client:      options.HTTPClient,
			Request:     request,
			Response:    &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
