// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type CompletePaymentRequest struct {
	// Used for optimistic concurrency. This opaque token identifies the current `Payment`
	// version that the caller expects. If the server has a different version of the Payment,
	// the update fails and a response with a VERSION_MISMATCH error is returned.
	VersionToken *string `json:"version_token,omitempty" url:"-"`
}

type CreatePaymentRequest struct {
	// The ID for the source of funds for this payment. This can be a payment token
	// (card nonce) generated by the Square payment form or a card on file made with the
	// Customers API. If recording a payment that the seller
	// received outside of Square, specify either "CASH" or "EXTERNAL".
	// For more information, see
	// [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
	SourceId string `json:"source_id" url:"-"`
	// A unique string that identifies this `CreatePayment` request. Keys can be any valid string
	// but must be unique for every `CreatePayment` request.
	//
	// Note: The number of allowed characters might be less than the stated maximum, if multi-byte
	// characters are used.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/working-with-apis/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
	// The amount of money to accept for this payment, not including `tip_money`.
	//
	// The amount must be specified in the smallest denomination of the applicable currency
	// (for example, US dollar amounts are specified in cents). For more information, see
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
	//
	// The currency code must match the currency associated with the business
	// that is accepting the payment.
	AmountMoney *Money `json:"amount_money,omitempty" url:"-"`
	// The amount designated as a tip, in addition to `amount_money`.
	//
	// The amount must be specified in the smallest denomination of the applicable currency
	// (for example, US dollar amounts are specified in cents). For more information, see
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
	//
	// The currency code must match the currency associated with the business
	// that is accepting the payment.
	TipMoney *Money `json:"tip_money,omitempty" url:"-"`
	// The amount of money that the developer is taking as a fee
	// for facilitating the payment on behalf of the seller.
	//
	// The amount cannot be more than 90% of the total amount of the payment.
	//
	// The amount must be specified in the smallest denomination of the applicable currency
	// (for example, US dollar amounts are specified in cents). For more information, see
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
	//
	// The fee currency code must match the currency associated with the seller
	// that is accepting the payment. The application must be from a developer
	// account in the same country and using the same currency code as the seller.
	//
	// For more information about the application fee scenario, see
	// [Take Payments and Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
	//
	// To set this field, `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required.
	// For more information, see [Permissions](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions).
	AppFeeMoney *Money `json:"app_fee_money,omitempty" url:"-"`
	// The duration of time after the payment's creation when Square automatically
	// either completes or cancels the payment depending on the `delay_action` field value.
	// For more information, see
	// [Time threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).
	//
	// This parameter should be specified as a time duration, in RFC 3339 format.
	//
	// Note: This feature is only supported for card payments. This parameter can only be set for a delayed
	// capture payment (`autocomplete=false`).
	//
	// Default:
	//
	// - Card-present payments: "PT36H" (36 hours) from the creation time.
	// - Card-not-present payments: "P7D" (7 days) from the creation time.
	DelayDuration *string `json:"delay_duration,omitempty" url:"-"`
	// The action to be applied to the payment when the `delay_duration` has elapsed. The action must be
	// CANCEL or COMPLETE. For more information, see
	// [Time Threshold](https://developer.squareup.com/docs/payments-api/take-payments/card-payments/delayed-capture#time-threshold).
	//
	// Default: CANCEL
	DelayAction *string `json:"delay_action,omitempty" url:"-"`
	// If set to `true`, this payment will be completed when possible. If
	// set to `false`, this payment is held in an approved state until either
	// explicitly completed (captured) or canceled (voided). For more information, see
	// [Delayed capture](https://developer.squareup.com/docs/payments-api/take-payments/card-payments#delayed-capture-of-a-card-payment).
	//
	// Default: true
	Autocomplete *bool `json:"autocomplete,omitempty" url:"-"`
	// Associates a previously created order with this payment.
	OrderId *string `json:"order_id,omitempty" url:"-"`
	// The [Customer](entity:Customer) ID of the customer associated with the payment.
	//
	// This is required if the `source_id` refers to a card on file created using the Customers API.
	CustomerId *string `json:"customer_id,omitempty" url:"-"`
	// The location ID to associate with the payment. If not specified, the default location is
	// used.
	LocationId *string `json:"location_id,omitempty" url:"-"`
	// An optional [TeamMember](entity:TeamMember) ID to associate with
	// this payment.
	TeamMemberId *string `json:"team_member_id,omitempty" url:"-"`
	// A user-defined ID to associate with the payment.
	//
	// You can use this field to associate the payment to an entity in an external system
	// (for example, you might specify an order ID that is generated by a third-party shopping cart).
	ReferenceId *string `json:"reference_id,omitempty" url:"-"`
	// An identifying token generated by [payments.verifyBuyer()](https://developer.squareup.com/reference/sdks/web/payments/objects/Payments#Payments.verifyBuyer).
	// Verification tokens encapsulate customer device information and 3-D Secure
	// challenge results to indicate that Square has verified the buyer identity.
	//
	// For more information, see [SCA Overview](https://developer.squareup.com/docs/sca-overview).
	VerificationToken *string `json:"verification_token,omitempty" url:"-"`
	// If set to `true` and charging a Square Gift Card, a payment might be returned with
	// `amount_money` equal to less than what was requested. For example, a request for $20 when charging
	// a Square Gift Card with a balance of $5 results in an APPROVED payment of $5. You might choose
	// to prompt the buyer for an additional payment to cover the remainder or cancel the Gift Card
	// payment. This field cannot be `true` when `autocomplete = true`.
	//
	// For more information, see
	// [Partial amount with Square Gift Cards](https://developer.squareup.com/docs/payments-api/take-payments#partial-payment-gift-card).
	//
	// Default: false
	AcceptPartialAuthorization *bool `json:"accept_partial_authorization,omitempty" url:"-"`
	// The buyer's email address.
	BuyerEmailAddress *string `json:"buyer_email_address,omitempty" url:"-"`
	// The buyer's billing address.
	BillingAddress *Address `json:"billing_address,omitempty" url:"-"`
	// The buyer's shipping address.
	ShippingAddress *Address `json:"shipping_address,omitempty" url:"-"`
	// An optional note to be entered by the developer when creating a payment.
	Note *string `json:"note,omitempty" url:"-"`
	// Optional additional payment information to include on the customer's card statement
	// as part of the statement description. This can be, for example, an invoice number, ticket number,
	// or short description that uniquely identifies the purchase.
	//
	// Note that the `statement_description_identifier` might get truncated on the statement description
	// to fit the required information including the Square identifier (SQ *) and name of the
	// seller taking the payment.
	StatementDescriptionIdentifier *string `json:"statement_description_identifier,omitempty" url:"-"`
	// Additional details required when recording a cash payment (`source_id` is CASH).
	CashDetails *CashPaymentDetails `json:"cash_details,omitempty" url:"-"`
	// Additional details required when recording an external payment (`source_id` is EXTERNAL).
	ExternalDetails *ExternalPaymentDetails `json:"external_details,omitempty" url:"-"`
}

type PaymentsListRequest struct {
	// The timestamp for the beginning of the reporting period, in RFC 3339 format.
	// Inclusive. Default: The current time minus one year.
	BeginTime *string `json:"-" url:"begin_time,omitempty"`
	// The timestamp for the end of the reporting period, in RFC 3339 format.
	//
	// Default: The current time.
	EndTime *string `json:"-" url:"end_time,omitempty"`
	// The order in which results are listed:
	//
	// - `ASC` - Oldest to newest.
	// - `DESC` - Newest to oldest (default).
	SortOrder *string `json:"-" url:"sort_order,omitempty"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this cursor to retrieve the next set of results for the original query.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"-" url:"cursor,omitempty"`
	// Limit results to the location supplied. By default, results are returned
	// for the default (main) location associated with the seller.
	LocationId *string `json:"-" url:"location_id,omitempty"`
	// The exact amount in the `total_money` for a payment.
	Total *int64 `json:"-" url:"total,omitempty"`
	// The last four digits of a payment card.
	Last4 *string `json:"-" url:"last_4,omitempty"`
	// The brand of the payment card (for example, VISA).
	CardBrand *string `json:"-" url:"card_brand,omitempty"`
	// The maximum number of results to be returned in a single page.
	// It is possible to receive fewer results than the specified limit on a given page.
	//
	// The default value of 100 is also the maximum allowed value. If the provided value is
	// greater than 100, it is ignored and the default value is used instead.
	//
	// Default: `100`
	Limit *int `json:"-" url:"limit,omitempty"`
}

// Defines the response returned by [CancelPayment](api-endpoint:Payments-CancelPayment).
type CancelPaymentResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The successfully canceled `Payment` object.
	Payment *Payment `json:"payment,omitempty" url:"payment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CancelPaymentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CancelPaymentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CancelPaymentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CancelPaymentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CancelPaymentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Stores details about a cash payment. Contains only non-confidential information. For more information, see
// [Take Cash Payments](https://developer.squareup.com/docs/payments-api/take-payments/cash-payments).
type CashPaymentDetails struct {
	// The amount and currency of the money supplied by the buyer.
	BuyerSuppliedMoney *Money `json:"buyer_supplied_money,omitempty" url:"buyer_supplied_money,omitempty"`
	// The amount of change due back to the buyer.
	// This read-only field is calculated
	// from the `amount_money` and `buyer_supplied_money` fields.
	ChangeBackMoney *Money `json:"change_back_money,omitempty" url:"change_back_money,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CashPaymentDetails) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CashPaymentDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler CashPaymentDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CashPaymentDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CashPaymentDetails) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the response returned by[CompletePayment](api-endpoint:Payments-CompletePayment).
type CompletePaymentResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The successfully completed payment.
	Payment *Payment `json:"payment,omitempty" url:"payment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompletePaymentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompletePaymentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CompletePaymentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompletePaymentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompletePaymentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Defines the response returned by [CreatePayment](api-endpoint:Payments-CreatePayment).
//
// If there are errors processing the request, the `payment` field might not be
// present, or it might be present with a status of `FAILED`.
type CreatePaymentResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The newly created payment.
	Payment *Payment `json:"payment,omitempty" url:"payment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreatePaymentResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreatePaymentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreatePaymentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreatePaymentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreatePaymentResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Stores details about an external payment. Contains only non-confidential information.
// For more information, see
// [Take External Payments](https://developer.squareup.com/docs/payments-api/take-payments/external-payments).
type ExternalPaymentDetails struct {
	// The type of external payment the seller received. It can be one of the following:
	//
	// - CHECK - Paid using a physical check.
	// - BANK_TRANSFER - Paid using external bank transfer.
	// - OTHER_GIFT_CARD - Paid using a non-Square gift card.
	// - CRYPTO - Paid using a crypto currency.
	// - SQUARE_CASH - Paid using Square Cash App.
	// - SOCIAL - Paid using peer-to-peer payment applications.
	// - EXTERNAL - A third-party application gathered this payment outside of Square.
	// - EMONEY - Paid using an E-money provider.
	// - CARD - A credit or debit card that Square does not support.
	// - STORED_BALANCE - Use for house accounts, store credit, and so forth.
	// - FOOD_VOUCHER - Restaurant voucher provided by employers to employees to pay for meals
	// - OTHER - A type not listed here.
	Type string `json:"type" url:"type"`
	// A description of the external payment source. For example,
	// "Food Delivery Service".
	Source string `json:"source" url:"source"`
	// An ID to associate the payment to its originating source.
	SourceId *string `json:"source_id,omitempty" url:"source_id,omitempty"`
	// The fees paid to the source. The `amount_money` minus this field is
	// the net amount seller receives.
	SourceFeeMoney *Money `json:"source_fee_money,omitempty" url:"source_fee_money,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *ExternalPaymentDetails) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ExternalPaymentDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler ExternalPaymentDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ExternalPaymentDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *ExternalPaymentDetails) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Defines the response returned by [GetPayment](api-endpoint:Payments-GetPayment).
type GetPaymentResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested `Payment`.
	Payment *Payment `json:"payment,omitempty" url:"payment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetPaymentResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetPaymentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetPaymentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetPaymentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetPaymentResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Defines the response returned by [ListPayments](api-endpoint:Payments-ListPayments).
type ListPaymentsResponse struct {
	// Information about errors encountered during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The requested list of payments.
	Payments []*Payment `json:"payments,omitempty" url:"payments,omitempty"`
	// The pagination cursor to be used in a subsequent request. If empty,
	// this is the final response.
	//
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListPaymentsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListPaymentsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListPaymentsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListPaymentsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListPaymentsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// Represents a payment processed by the Square API.
type Payment struct {
	// A unique ID for the payment.
	Id *string `json:"id,omitempty" url:"id,omitempty"`
	// The timestamp of when the payment was created, in RFC 3339 format.
	CreatedAt *string `json:"created_at,omitempty" url:"created_at,omitempty"`
	// The timestamp of when the payment was last updated, in RFC 3339 format.
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	// The amount processed for this payment, not including `tip_money`.
	//
	// The amount is specified in the smallest denomination of the applicable currency (for example,
	// US dollar amounts are specified in cents). For more information, see
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
	AmountMoney *Money `json:"amount_money,omitempty" url:"amount_money,omitempty"`
	// The amount designated as a tip.
	//
	// This amount is specified in the smallest denomination of the applicable currency (for example,
	// US dollar amounts are specified in cents). For more information, see
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
	TipMoney *Money `json:"tip_money,omitempty" url:"tip_money,omitempty"`
	// The total amount for the payment, including `amount_money` and `tip_money`.
	// This amount is specified in the smallest denomination of the applicable currency (for example,
	// US dollar amounts are specified in cents). For more information, see
	// [Working with Monetary Amounts](https://developer.squareup.com/docs/build-basics/working-with-monetary-amounts).
	TotalMoney *Money `json:"total_money,omitempty" url:"total_money,omitempty"`
	// The amount the developer is taking as a fee for facilitating the payment on behalf
	// of the seller. This amount is specified in the smallest denomination of the applicable currency
	// (for example, US dollar amounts are specified in cents). For more information,
	// see [Take Payments and Collect Fees](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees).
	//
	// The amount cannot be more than 90% of the `total_money` value.
	//
	// To set this field, `PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS` OAuth permission is required.
	// For more information, see [Permissions](https://developer.squareup.com/docs/payments-api/take-payments-and-collect-fees#permissions).
	AppFeeMoney *Money `json:"app_fee_money,omitempty" url:"app_fee_money,omitempty"`
	// The initial amount of money approved for this payment.
	ApprovedMoney *Money `json:"approved_money,omitempty" url:"approved_money,omitempty"`
	// The processing fees and fee adjustments assessed by Square for this payment.
	ProcessingFee []*ProcessingFee `json:"processing_fee,omitempty" url:"processing_fee,omitempty"`
	// The total amount of the payment refunded to date.
	//
	// This amount is specified in the smallest denomination of the applicable currency (for example,
	// US dollar amounts are specified in cents).
	RefundedMoney *Money `json:"refunded_money,omitempty" url:"refunded_money,omitempty"`
	// Indicates whether the payment is APPROVED, PENDING, COMPLETED, CANCELED, or FAILED.
	Status *string `json:"status,omitempty" url:"status,omitempty"`
	// The duration of time after the payment's creation when Square automatically applies the
	// `delay_action` to the payment. This automatic `delay_action` applies only to payments that
	// do not reach a terminal state (COMPLETED, CANCELED, or FAILED) before the `delay_duration`
	// time period.
	//
	// This field is specified as a time duration, in RFC 3339 format.
	//
	// Notes:
	// This feature is only supported for card payments.
	//
	// Default:
	//
	// - Card-present payments: "PT36H" (36 hours) from the creation time.
	// - Card-not-present payments: "P7D" (7 days) from the creation time.
	DelayDuration *string `json:"delay_duration,omitempty" url:"delay_duration,omitempty"`
	// The action to be applied to the payment when the `delay_duration` has elapsed.
	//
	// Current values include `CANCEL` and `COMPLETE`.
	DelayAction *string `json:"delay_action,omitempty" url:"delay_action,omitempty"`
	// The read-only timestamp of when the `delay_action` is automatically applied,
	// in RFC 3339 format.
	//
	// Note that this field is calculated by summing the payment's `delay_duration` and `created_at`
	// fields. The `created_at` field is generated by Square and might not exactly match the
	// time on your local machine.
	DelayedUntil *string `json:"delayed_until,omitempty" url:"delayed_until,omitempty"`
	// The source type for this payment.
	//
	// Current values include `CARD`, `BANK_ACCOUNT`, `WALLET`, `BUY_NOW_PAY_LATER`, `CASH`, or
	// `EXTERNAL`. For information about these payment source types,
	// see [Take Payments](https://developer.squareup.com/docs/payments-api/take-payments).
	SourceType *string `json:"source_type,omitempty" url:"source_type,omitempty"`
	// Details about a card payment. These details are only populated if the source_type is `CARD`.
	CardDetails *CardPaymentDetails `json:"card_details,omitempty" url:"card_details,omitempty"`
	// Details about a cash payment. These details are only populated if the source_type is `CASH`.
	CashDetails *CashPaymentDetails `json:"cash_details,omitempty" url:"cash_details,omitempty"`
	// Details about a bank account payment. These details are only populated if the source_type is `BANK_ACCOUNT`.
	BankAccountDetails *BankAccountPaymentDetails `json:"bank_account_details,omitempty" url:"bank_account_details,omitempty"`
	// Details about an external payment. The details are only populated
	// if the `source_type` is `EXTERNAL`.
	ExternalDetails *ExternalPaymentDetails `json:"external_details,omitempty" url:"external_details,omitempty"`
	// Details about an wallet payment. The details are only populated
	// if the `source_type` is `WALLET`.
	WalletDetails *DigitalWalletDetails `json:"wallet_details,omitempty" url:"wallet_details,omitempty"`
	// Details about a Buy Now Pay Later payment. The details are only populated
	// if the `source_type` is `BUY_NOW_PAY_LATER`. For more information, see
	// [Afterpay Payments](https://developer.squareup.com/docs/payments-api/take-payments/afterpay-payments).
	BuyNowPayLaterDetails *BuyNowPayLaterDetails `json:"buy_now_pay_later_details,omitempty" url:"buy_now_pay_later_details,omitempty"`
	// The ID of the location associated with the payment.
	LocationId *string `json:"location_id,omitempty" url:"location_id,omitempty"`
	// The ID of the order associated with the payment.
	OrderId *string `json:"order_id,omitempty" url:"order_id,omitempty"`
	// An optional ID that associates the payment with an entity in
	// another system.
	ReferenceId *string `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	// The [Customer](entity:Customer) ID of the customer associated with the payment.
	CustomerId *string `json:"customer_id,omitempty" url:"customer_id,omitempty"`
	// **Deprecated**: Use `Payment.team_member_id` instead.
	//
	// An optional ID of the employee associated with taking the payment.
	EmployeeId *string `json:"employee_id,omitempty" url:"employee_id,omitempty"`
	// An optional ID of the [TeamMember](entity:TeamMember) associated with taking the payment.
	TeamMemberId *string `json:"team_member_id,omitempty" url:"team_member_id,omitempty"`
	// A list of `refund_id`s identifying refunds for the payment.
	RefundIds []string `json:"refund_ids,omitempty" url:"refund_ids,omitempty"`
	// Provides information about the risk associated with the payment, as determined by Square.
	// This field is present for payments to sellers that have opted in to receive risk
	// evaluations.
	RiskEvaluation *RiskEvaluation `json:"risk_evaluation,omitempty" url:"risk_evaluation,omitempty"`
	// The buyer's email address.
	BuyerEmailAddress *string `json:"buyer_email_address,omitempty" url:"buyer_email_address,omitempty"`
	// The buyer's billing address.
	BillingAddress *Address `json:"billing_address,omitempty" url:"billing_address,omitempty"`
	// The buyer's shipping address.
	ShippingAddress *Address `json:"shipping_address,omitempty" url:"shipping_address,omitempty"`
	// An optional note to include when creating a payment.
	Note *string `json:"note,omitempty" url:"note,omitempty"`
	// Additional payment information that gets added to the customer's card statement
	// as part of the statement description.
	//
	// Note that the `statement_description_identifier` might get truncated on the statement description
	// to fit the required information including the Square identifier (SQ \*) and the name of the
	// seller taking the payment.
	StatementDescriptionIdentifier *string `json:"statement_description_identifier,omitempty" url:"statement_description_identifier,omitempty"`
	// Actions that can be performed on this payment:
	//
	// - `EDIT_AMOUNT_UP` - The payment amount can be edited up.
	// - `EDIT_AMOUNT_DOWN` - The payment amount can be edited down.
	// - `EDIT_TIP_AMOUNT_UP` - The tip amount can be edited up.
	// - `EDIT_TIP_AMOUNT_DOWN` - The tip amount can be edited down.
	// - `EDIT_DELAY_ACTION` - The delay_action can be edited.
	Capabilities []string `json:"capabilities,omitempty" url:"capabilities,omitempty"`
	// The payment's receipt number.
	// The field is missing if a payment is canceled.
	ReceiptNumber *string `json:"receipt_number,omitempty" url:"receipt_number,omitempty"`
	// The URL for the payment's receipt.
	// The field is only populated for COMPLETED payments.
	ReceiptUrl *string `json:"receipt_url,omitempty" url:"receipt_url,omitempty"`
	// Details about the device that took the payment.
	DeviceDetails *DeviceDetails `json:"device_details,omitempty" url:"device_details,omitempty"`
	// Details about the application that took the payment.
	ApplicationDetails *ApplicationDetails `json:"application_details,omitempty" url:"application_details,omitempty"`
	// Used for optimistic concurrency. This opaque token identifies a specific version of the
	// `Payment` object.
	VersionToken *string `json:"version_token,omitempty" url:"version_token,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Payment) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Payment) UnmarshalJSON(data []byte) error {
	type unmarshaler Payment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Payment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Payment) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Defines the response returned by
// [UpdatePayment](api-endpoint:Payments-UpdatePayment).
type UpdatePaymentResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The updated payment.
	Payment *Payment `json:"payment,omitempty" url:"payment,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdatePaymentResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdatePaymentResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdatePaymentResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdatePaymentResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdatePaymentResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdatePaymentRequest struct {
	// The updated `Payment` object.
	Payment *Payment `json:"payment,omitempty" url:"-"`
	// A unique string that identifies this `UpdatePayment` request. Keys can be any valid string
	// but must be unique for every `UpdatePayment` request.
	//
	// For more information, see [Idempotency](https://developer.squareup.com/docs/basics/api101/idempotency).
	IdempotencyKey string `json:"idempotency_key" url:"-"`
}
