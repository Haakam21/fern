// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/mixed-file-directory/fern/core"
)

type SearchLoyaltyEventsRequest struct {
	// A set of one or more predefined query filters to apply when
	// searching for loyalty events. The endpoint performs a logical AND to
	// evaluate multiple filters and performs a logical OR on arrays
	// that specifies multiple field values.
	Query *LoyaltyEventQuery `json:"query,omitempty" url:"-"`
	// The maximum number of results to include in the response.
	// The last page might contain fewer events.
	// The default is 30 events.
	Limit *int `json:"limit,omitempty" url:"-"`
	// A pagination cursor returned by a previous call to this endpoint.
	// Provide this to retrieve the next set of results for your original query.
	// For more information, see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"-"`
}

// Represents a query used to search for loyalty events.
type LoyaltyEventQuery struct {
	// The query filter criteria.
	Filter *LoyaltyEventFilter `json:"filter,omitempty" url:"filter,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *LoyaltyEventQuery) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LoyaltyEventQuery) UnmarshalJSON(data []byte) error {
	type unmarshaler LoyaltyEventQuery
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LoyaltyEventQuery(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *LoyaltyEventQuery) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

// A response that contains loyalty events that satisfy the search
// criteria, in order by the `created_at` date.
type SearchLoyaltyEventsResponse struct {
	// Any errors that occurred during the request.
	Errors []*Error `json:"errors,omitempty" url:"errors,omitempty"`
	// The loyalty events that satisfy the search criteria.
	Events []*LoyaltyEvent `json:"events,omitempty" url:"events,omitempty"`
	// The pagination cursor to be used in a subsequent
	// request. If empty, this is the final response.
	// For more information,
	// see [Pagination](https://developer.squareup.com/docs/basics/api101/pagination).
	Cursor *string `json:"cursor,omitempty" url:"cursor,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchLoyaltyEventsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchLoyaltyEventsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchLoyaltyEventsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchLoyaltyEventsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchLoyaltyEventsResponse) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
