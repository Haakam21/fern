types:
  EndpointId: string

  Declaration:
    properties:
      fernFilepath: FernFilepath
      name: Name

  FernFilepath:
    properties:
      allParts: list<Name>
      packagePath: list<Name>
      file: optional<Name>

  Name:
    properties:
      camelCase: SafeAndUnsafeString
      pascalCase: SafeAndUnsafeString
      snakeCase: SafeAndUnsafeString
      screamingSnakeCase: SafeAndUnsafeString

  NameAndWireValue:
    properties:
      name: Name
      wireValue:
        docs: |
          This value is primarily used to match the name against the snippet request payload.
        type: string

  SafeAndUnsafeString:
    properties:
      safeName: string
      unsafeName: string

  IntermediateRepresentation:
    docs: |
      This represents the IR required to generate dynamic snippets.
      
      This IR minimizes the space required to generate snippets in a variety
      of environments (e.g. web, offline, etc).

      TODO: Add auth and global headers.
    properties:
      endpoints: map<EndpointId, Endpoint>

  Endpoint:
    properties:
      declaration: Declaration
      request: Request

  Request:
    docs: |
      Reperesents the request parameters required to call a specific endpoiont.

      Note that the constructor parameters are not included here - these are
      resolved from the IntermediateRepresentation.

      ```go
      import (
        context "context"
        acme "github.com/buildwithfern/acme-go"
        client "github.com/buildwithfern/acme-go/client"
      )

      client := client.NewClient("<YOUR_API_KEY>")
      client.User.Create(
        context.TODO(),
        &acme.CreateUserRequest{
          User: &acme.User{
            FirstName: "John",
            LastName:  "Doe",
          },
        },
      )
      ```
    union:
      inlined: InlinedRequest
      referenced: ReferencedRequest

  ReferencedRequest:
    properties:
      pathParameters: list<NamedParameter>
      body: Type

  InlinedRequest:
    properties:
      declaration: Declaration
      pathParameters: list<NamedParameter>
      queryParameters: list<NamedParameter>
      headers: list<NamedParameter>
      body: optional<InlinedRequestBody>

  InlinedRequestBody:
    discriminant: bodyType
    union:
      properties: list<NamedParameter>
      referenced: ReferencedRequestBody

  ReferencedRequestBody:
    properties:
      bodyKey: Name
      type: Type

  NamedParameter:
    properties:
      name: NameAndWireValue
      type: Type

  Type:
    docs: |
      Represents the type of a parameter that can be used to generate a dynamic type.
    union:
      discriminatedUnion: DiscriminatedUnionType
      enum: EnumType
      list: Type
      literal: LiteralType
      map: MapType
      object: ObjectType
      optional: Type
      primitive: PrimitiveType
      set: Type
      undicriminatedUnion: UndiscriminatedUnionType
      unknown: {}

  DiscriminatedUnionType:
    properties:
      declaration: Declaration
      discriminant: NameAndWireValue
      types:
        docs: |
          Map from the discriminant value (e.g. "user") to the type (e.g. User).
        type: map<string, Type>

  EnumType:
    properties:
      declaration: Declaration
      values: list<NameAndWireValue>

  LiteralType:
    enum:
      - BOOLEAN
      - STRING

  MapType:
    properties:
      key: Type
      value: Type

  ObjectType:
    properties:
      declaration: Declaration
      properties: list<NamedParameter>

  PrimitiveType:
    enum:
      - INTEGER
      - LONG
      - UINT
      - UINT_64
      - FLOAT
      - DOUBLE
      - BOOLEAN
      - STRING
      - DATE
      - DATE_TIME
      - UUID
      - BASE_64
      - BIG_INTEGER
  
  UndiscriminatedUnionType:
    properties:
      declaration: Declaration
      types:
        docs: |
          The dynamic type will be rendered with the first type that matches.
        type: list<Type>
