# TODO: Each of these features requires special snippets generated by each generator. We have two options:
#
# 1. The generator must be aware of the endpoints requested by the user to generate each one. This isn't
#    ideal; it puts more burden on the generator to determine which endpoint requires a particular snippet,
#    and its more restrictive if we ever want to use these snippets elsewhere.
#
# 2. We adapt the snippet model to include a separate set of endpoint snippets for each feature. The number of
#    the snippets will grow substantially, but we don't have to send all that information to FDR for now - it
#    can remain local to the docker container and only used to generate the README.md.

language: go
features:
  - name: usage
    description: |
      Instantiate the client with the following:

  # Note that this is an example of a feature that isn't widely used between each generator
  # (it's likely only relevant for Go). We can easily use the catch-all block to identify
  # snippets for this feature.
  - name: optionals 
    description: |
      This library models optional primitives and enum types as pointers. This is primarily meant
      to distinguish default zero values from explicit values (e.g. `false` for `bool` and `""`
      for `string`). A collection of helper functions are provided to easily map a primitive or enum
      to its pointer-equivalent, which are shown below:

  - name: timeouts
    description: |
      Setting a timeout for each individual request is as simple as
      using the standard `context` library. Setting a one second timeout
      for an individual API call looks like the following:

  - name: requestoptions
    description: |
      A variety of request options are included to adapt the behavior of the library,
      which includes configuring authorization tokens, or providing your own instrumented
      `*http.Client`. Both of these options are shown below:
    addendum: |
      As you can see, these request options can either be specified on the client so that
      they're applied on _every_ request or for an individual request.

  - name: errors
    description: |
      Structured error types are returned from API calls that return non-success status codes.
      For example, you can check if the error was of a particular type with the following: