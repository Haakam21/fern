/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../..";
import * as FernOpenapiIr from "../../../../api";
import * as core from "../../../../core";

export const WebhookExample: core.serialization.Schema<serializers.WebhookExample.Raw, FernOpenapiIr.WebhookExample> =
    core.serialization
        .union("type", {
            unknown: core.serialization.object({
                value: core.serialization.lazy(async () => (await import("../../..")).FernExample),
            }),
            full: core.serialization.lazyObject(async () => (await import("../../..")).WebhookExampleCall),
        })
        .transform<FernOpenapiIr.WebhookExample>({
            transform: (value) => {
                switch (value.type) {
                    case "unknown":
                        return FernOpenapiIr.WebhookExample.unknown(value.value);
                    case "full":
                        return FernOpenapiIr.WebhookExample.full(value);
                    default:
                        return value as FernOpenapiIr.WebhookExample;
                }
            },
            untransform: ({ _visit, ...value }) => value as any,
        });

export declare namespace WebhookExample {
    type Raw = WebhookExample.Unknown | WebhookExample.Full;

    interface Unknown {
        type: "unknown";
        value?: serializers.FernExample.Raw;
    }

    interface Full extends serializers.WebhookExampleCall.Raw {
        type: "full";
    }
}
